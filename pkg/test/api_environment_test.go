/*
Candlepin

Testing EnvironmentAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/joshmalbrecht/candlepin-go-client"
)

func Test_openapi_EnvironmentAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EnvironmentAPIService CreateConsumerInEnvironment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var envId string

		resp, httpRes, err := apiClient.EnvironmentAPI.CreateConsumerInEnvironment(context.Background(), envId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnvironmentAPIService DeleteEnvironment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var envId string

		httpRes, err := apiClient.EnvironmentAPI.DeleteEnvironment(context.Background(), envId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnvironmentAPIService DeleteEnvironmentContentOverrides", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentId string

		resp, httpRes, err := apiClient.EnvironmentAPI.DeleteEnvironmentContentOverrides(context.Background(), environmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnvironmentAPIService DemoteContent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var envId string

		resp, httpRes, err := apiClient.EnvironmentAPI.DemoteContent(context.Background(), envId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnvironmentAPIService GetEnvironment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var envId string

		resp, httpRes, err := apiClient.EnvironmentAPI.GetEnvironment(context.Background(), envId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnvironmentAPIService GetEnvironmentContentOverrides", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentId string

		resp, httpRes, err := apiClient.EnvironmentAPI.GetEnvironmentContentOverrides(context.Background(), environmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnvironmentAPIService PromoteContent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var envId string

		resp, httpRes, err := apiClient.EnvironmentAPI.PromoteContent(context.Background(), envId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnvironmentAPIService PutEnvironmentContentOverrides", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentId string

		resp, httpRes, err := apiClient.EnvironmentAPI.PutEnvironmentContentOverrides(context.Background(), environmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnvironmentAPIService UpdateEnvironment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var envId string

		resp, httpRes, err := apiClient.EnvironmentAPI.UpdateEnvironment(context.Background(), envId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
