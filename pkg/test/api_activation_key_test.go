/*
Candlepin

Testing ActivationKeyAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/joshmalbrecht/candlepin-go-client"
)

func Test_openapi_ActivationKeyAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ActivationKeyAPIService AddActivationKeyContentOverrides", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activationKeyId string

		resp, httpRes, err := apiClient.ActivationKeyAPI.AddActivationKeyContentOverrides(context.Background(), activationKeyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivationKeyAPIService AddPoolToKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activationKeyId string
		var poolId string

		resp, httpRes, err := apiClient.ActivationKeyAPI.AddPoolToKey(context.Background(), activationKeyId, poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivationKeyAPIService AddProductIdToKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activationKeyId string
		var productId string

		resp, httpRes, err := apiClient.ActivationKeyAPI.AddProductIdToKey(context.Background(), activationKeyId, productId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivationKeyAPIService DeleteActivationKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activationKeyId string

		httpRes, err := apiClient.ActivationKeyAPI.DeleteActivationKey(context.Background(), activationKeyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivationKeyAPIService DeleteActivationKeyContentOverrides", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activationKeyId string

		resp, httpRes, err := apiClient.ActivationKeyAPI.DeleteActivationKeyContentOverrides(context.Background(), activationKeyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivationKeyAPIService FindActivationKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ActivationKeyAPI.FindActivationKey(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivationKeyAPIService GetActivationKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activationKeyId string

		resp, httpRes, err := apiClient.ActivationKeyAPI.GetActivationKey(context.Background(), activationKeyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivationKeyAPIService GetActivationKeyPools", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activationKeyId string

		resp, httpRes, err := apiClient.ActivationKeyAPI.GetActivationKeyPools(context.Background(), activationKeyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivationKeyAPIService ListActivationKeyContentOverrides", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activationKeyId string

		resp, httpRes, err := apiClient.ActivationKeyAPI.ListActivationKeyContentOverrides(context.Background(), activationKeyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivationKeyAPIService RemovePoolFromKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activationKeyId string
		var poolId string

		resp, httpRes, err := apiClient.ActivationKeyAPI.RemovePoolFromKey(context.Background(), activationKeyId, poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivationKeyAPIService RemoveProductIdFromKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activationKeyId string
		var productId string

		resp, httpRes, err := apiClient.ActivationKeyAPI.RemoveProductIdFromKey(context.Background(), activationKeyId, productId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivationKeyAPIService UpdateActivationKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activationKeyId string

		resp, httpRes, err := apiClient.ActivationKeyAPI.UpdateActivationKey(context.Background(), activationKeyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
