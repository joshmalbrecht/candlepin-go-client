/*
Candlepin

Testing OwnerProductAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/joshmalbrecht/candlepin-go-client/pkg"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_OwnerProductAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OwnerProductAPIService AddContentToProduct", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var ownerKey string
		var productId string
		var contentId string

		resp, httpRes, err := apiClient.OwnerProductAPI.AddContentToProduct(context.Background(), ownerKey, productId, contentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OwnerProductAPIService AddContentsToProduct", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var ownerKey string
		var productId string

		resp, httpRes, err := apiClient.OwnerProductAPI.AddContentsToProduct(context.Background(), ownerKey, productId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OwnerProductAPIService CreateProduct", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var ownerKey string

		resp, httpRes, err := apiClient.OwnerProductAPI.CreateProduct(context.Background(), ownerKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OwnerProductAPIService GetProductById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var ownerKey string
		var productId string

		resp, httpRes, err := apiClient.OwnerProductAPI.GetProductById(context.Background(), ownerKey, productId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OwnerProductAPIService GetProductCertificateById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var ownerKey string
		var productId string

		resp, httpRes, err := apiClient.OwnerProductAPI.GetProductCertificateById(context.Background(), ownerKey, productId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OwnerProductAPIService GetProductsByOwner", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var ownerKey string

		resp, httpRes, err := apiClient.OwnerProductAPI.GetProductsByOwner(context.Background(), ownerKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OwnerProductAPIService RefreshPoolsForProduct", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var ownerKey string
		var productId string

		resp, httpRes, err := apiClient.OwnerProductAPI.RefreshPoolsForProduct(context.Background(), ownerKey, productId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OwnerProductAPIService RemoveContentFromProduct", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var ownerKey string
		var productId string
		var contentId string

		resp, httpRes, err := apiClient.OwnerProductAPI.RemoveContentFromProduct(context.Background(), ownerKey, productId, contentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OwnerProductAPIService RemoveContentsFromProduct", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var ownerKey string
		var productId string

		resp, httpRes, err := apiClient.OwnerProductAPI.RemoveContentsFromProduct(context.Background(), ownerKey, productId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OwnerProductAPIService RemoveProduct", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var ownerKey string
		var productId string

		httpRes, err := apiClient.OwnerProductAPI.RemoveProduct(context.Background(), ownerKey, productId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OwnerProductAPIService UpdateProduct", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var ownerKey string
		var productId string

		resp, httpRes, err := apiClient.OwnerProductAPI.UpdateProduct(context.Background(), ownerKey, productId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
