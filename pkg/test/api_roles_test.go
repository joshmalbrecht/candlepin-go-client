/*
Candlepin

Testing RolesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/joshmalbrecht/candlepin-go-client"
)

func Test_openapi_RolesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RolesAPIService AddRolePermission", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.AddRolePermission(context.Background(), roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService AddUserToRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roleName string
		var username string

		resp, httpRes, err := apiClient.RolesAPI.AddUserToRole(context.Background(), roleName, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService CreateRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RolesAPI.CreateRole(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService DeleteRoleByName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roleName string

		httpRes, err := apiClient.RolesAPI.DeleteRoleByName(context.Background(), roleName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService DeleteUserFromRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roleName string
		var username string

		resp, httpRes, err := apiClient.RolesAPI.DeleteUserFromRole(context.Background(), roleName, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService GetRoleByName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.GetRoleByName(context.Background(), roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService GetRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RolesAPI.GetRoles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService RemoveRolePermission", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roleName string
		var permId string

		resp, httpRes, err := apiClient.RolesAPI.RemoveRolePermission(context.Background(), roleName, permId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService UpdateRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.UpdateRole(context.Background(), roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
