/*
Candlepin

Testing ConsumerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/joshmalbrecht/candlepin-go-client/pkg"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_ConsumerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ConsumerAPIService AddConsumerContentOverrides", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string

		resp, httpRes, err := apiClient.ConsumerAPI.AddConsumerContentOverrides(context.Background(), consumerUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService Bind", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string

		resp, httpRes, err := apiClient.ConsumerAPI.Bind(context.Background(), consumerUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService ConsumerExists", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string

		httpRes, err := apiClient.ConsumerAPI.ConsumerExists(context.Background(), consumerUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService ConsumerExistsBulk", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.ConsumerAPI.ConsumerExistsBulk(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService CreateConsumer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ConsumerAPI.CreateConsumer(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService DeleteConsumer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string

		httpRes, err := apiClient.ConsumerAPI.DeleteConsumer(context.Background(), consumerUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService DeleteConsumerContentOverrides", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string

		resp, httpRes, err := apiClient.ConsumerAPI.DeleteConsumerContentOverrides(context.Background(), consumerUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService DownloadExistingExport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string
		var exportId string

		resp, httpRes, err := apiClient.ConsumerAPI.DownloadExistingExport(context.Background(), consumerUuid, exportId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService DryBind", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string

		resp, httpRes, err := apiClient.ConsumerAPI.DryBind(context.Background(), consumerUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService ExportCertificates", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string

		resp, httpRes, err := apiClient.ConsumerAPI.ExportCertificates(context.Background(), consumerUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService ExportData", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string

		resp, httpRes, err := apiClient.ConsumerAPI.ExportData(context.Background(), consumerUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService ExportDataAsync", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string

		resp, httpRes, err := apiClient.ConsumerAPI.ExportDataAsync(context.Background(), consumerUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService GetComplianceStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string

		resp, httpRes, err := apiClient.ConsumerAPI.GetComplianceStatus(context.Background(), consumerUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService GetComplianceStatusList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ConsumerAPI.GetComplianceStatusList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService GetConsumer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string

		resp, httpRes, err := apiClient.ConsumerAPI.GetConsumer(context.Background(), consumerUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService GetContentAccessBody", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string

		resp, httpRes, err := apiClient.ConsumerAPI.GetContentAccessBody(context.Background(), consumerUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService GetContentAccessForConsumer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string

		resp, httpRes, err := apiClient.ConsumerAPI.GetContentAccessForConsumer(context.Background(), consumerUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService GetEntitlementCertificateSerials", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string

		resp, httpRes, err := apiClient.ConsumerAPI.GetEntitlementCertificateSerials(context.Background(), consumerUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService GetGuests", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string

		resp, httpRes, err := apiClient.ConsumerAPI.GetGuests(context.Background(), consumerUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService GetHost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string

		resp, httpRes, err := apiClient.ConsumerAPI.GetHost(context.Background(), consumerUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService GetOwnerByConsumerUuid", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string

		resp, httpRes, err := apiClient.ConsumerAPI.GetOwnerByConsumerUuid(context.Background(), consumerUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService GetRelease", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string

		resp, httpRes, err := apiClient.ConsumerAPI.GetRelease(context.Background(), consumerUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService GetSystemPurposeComplianceStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string

		resp, httpRes, err := apiClient.ConsumerAPI.GetSystemPurposeComplianceStatus(context.Background(), consumerUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService ListConsumerContentOverrides", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string

		resp, httpRes, err := apiClient.ConsumerAPI.ListConsumerContentOverrides(context.Background(), consumerUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService ListEntitlements", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string

		resp, httpRes, err := apiClient.ConsumerAPI.ListEntitlements(context.Background(), consumerUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService RegenerateEntitlementCertificates", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string

		httpRes, err := apiClient.ConsumerAPI.RegenerateEntitlementCertificates(context.Background(), consumerUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService RegenerateIdentityCertificates", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string

		resp, httpRes, err := apiClient.ConsumerAPI.RegenerateIdentityCertificates(context.Background(), consumerUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService RemoveDeletionRecord", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string

		httpRes, err := apiClient.ConsumerAPI.RemoveDeletionRecord(context.Background(), consumerUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService SearchConsumers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ConsumerAPI.SearchConsumers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService UnbindAll", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string

		resp, httpRes, err := apiClient.ConsumerAPI.UnbindAll(context.Background(), consumerUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService UnbindByEntitlementId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string
		var dbid string

		httpRes, err := apiClient.ConsumerAPI.UnbindByEntitlementId(context.Background(), consumerUuid, dbid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService UnbindByPool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string
		var poolId string

		httpRes, err := apiClient.ConsumerAPI.UnbindByPool(context.Background(), consumerUuid, poolId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService UnbindBySerial", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string
		var serial int64

		httpRes, err := apiClient.ConsumerAPI.UnbindBySerial(context.Background(), consumerUuid, serial).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerAPIService UpdateConsumer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var consumerUuid string

		httpRes, err := apiClient.ConsumerAPI.UpdateConsumer(context.Background(), consumerUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
