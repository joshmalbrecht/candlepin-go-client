/*
Candlepin

Candlepin is a subscription management server written in Java. It helps with management of software subscriptions.

API version: 4.4.12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ContentDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentDTO{}

// ContentDTO Represents the content data exposed to the API.
type ContentDTO struct {
	Created *time.Time `json:"created,omitempty"`
	Updated *time.Time `json:"updated,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
	Id *string `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	Label *string `json:"label,omitempty"`
	Name *string `json:"name,omitempty"`
	Vendor *string `json:"vendor,omitempty"`
	ContentUrl *string `json:"contentUrl,omitempty"`
	RequiredTags *string `json:"requiredTags,omitempty"`
	ReleaseVer *string `json:"releaseVer,omitempty"`
	GpgUrl *string `json:"gpgUrl,omitempty"`
	ModifiedProductIds []string `json:"modifiedProductIds,omitempty"`
	Arches *string `json:"arches,omitempty"`
	MetadataExpire *int64 `json:"metadataExpire,omitempty"`
}

// NewContentDTO instantiates a new ContentDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentDTO() *ContentDTO {
	this := ContentDTO{}
	return &this
}

// NewContentDTOWithDefaults instantiates a new ContentDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentDTOWithDefaults() *ContentDTO {
	this := ContentDTO{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ContentDTO) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentDTO) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ContentDTO) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *ContentDTO) SetCreated(v time.Time) {
	o.Created = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *ContentDTO) GetUpdated() time.Time {
	if o == nil || IsNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentDTO) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *ContentDTO) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *ContentDTO) SetUpdated(v time.Time) {
	o.Updated = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *ContentDTO) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentDTO) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *ContentDTO) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *ContentDTO) SetUuid(v string) {
	o.Uuid = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ContentDTO) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentDTO) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ContentDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ContentDTO) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ContentDTO) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentDTO) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ContentDTO) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ContentDTO) SetType(v string) {
	o.Type = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ContentDTO) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentDTO) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ContentDTO) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ContentDTO) SetLabel(v string) {
	o.Label = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ContentDTO) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentDTO) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ContentDTO) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ContentDTO) SetName(v string) {
	o.Name = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *ContentDTO) GetVendor() string {
	if o == nil || IsNil(o.Vendor) {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentDTO) GetVendorOk() (*string, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *ContentDTO) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *ContentDTO) SetVendor(v string) {
	o.Vendor = &v
}

// GetContentUrl returns the ContentUrl field value if set, zero value otherwise.
func (o *ContentDTO) GetContentUrl() string {
	if o == nil || IsNil(o.ContentUrl) {
		var ret string
		return ret
	}
	return *o.ContentUrl
}

// GetContentUrlOk returns a tuple with the ContentUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentDTO) GetContentUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ContentUrl) {
		return nil, false
	}
	return o.ContentUrl, true
}

// HasContentUrl returns a boolean if a field has been set.
func (o *ContentDTO) HasContentUrl() bool {
	if o != nil && !IsNil(o.ContentUrl) {
		return true
	}

	return false
}

// SetContentUrl gets a reference to the given string and assigns it to the ContentUrl field.
func (o *ContentDTO) SetContentUrl(v string) {
	o.ContentUrl = &v
}

// GetRequiredTags returns the RequiredTags field value if set, zero value otherwise.
func (o *ContentDTO) GetRequiredTags() string {
	if o == nil || IsNil(o.RequiredTags) {
		var ret string
		return ret
	}
	return *o.RequiredTags
}

// GetRequiredTagsOk returns a tuple with the RequiredTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentDTO) GetRequiredTagsOk() (*string, bool) {
	if o == nil || IsNil(o.RequiredTags) {
		return nil, false
	}
	return o.RequiredTags, true
}

// HasRequiredTags returns a boolean if a field has been set.
func (o *ContentDTO) HasRequiredTags() bool {
	if o != nil && !IsNil(o.RequiredTags) {
		return true
	}

	return false
}

// SetRequiredTags gets a reference to the given string and assigns it to the RequiredTags field.
func (o *ContentDTO) SetRequiredTags(v string) {
	o.RequiredTags = &v
}

// GetReleaseVer returns the ReleaseVer field value if set, zero value otherwise.
func (o *ContentDTO) GetReleaseVer() string {
	if o == nil || IsNil(o.ReleaseVer) {
		var ret string
		return ret
	}
	return *o.ReleaseVer
}

// GetReleaseVerOk returns a tuple with the ReleaseVer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentDTO) GetReleaseVerOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseVer) {
		return nil, false
	}
	return o.ReleaseVer, true
}

// HasReleaseVer returns a boolean if a field has been set.
func (o *ContentDTO) HasReleaseVer() bool {
	if o != nil && !IsNil(o.ReleaseVer) {
		return true
	}

	return false
}

// SetReleaseVer gets a reference to the given string and assigns it to the ReleaseVer field.
func (o *ContentDTO) SetReleaseVer(v string) {
	o.ReleaseVer = &v
}

// GetGpgUrl returns the GpgUrl field value if set, zero value otherwise.
func (o *ContentDTO) GetGpgUrl() string {
	if o == nil || IsNil(o.GpgUrl) {
		var ret string
		return ret
	}
	return *o.GpgUrl
}

// GetGpgUrlOk returns a tuple with the GpgUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentDTO) GetGpgUrlOk() (*string, bool) {
	if o == nil || IsNil(o.GpgUrl) {
		return nil, false
	}
	return o.GpgUrl, true
}

// HasGpgUrl returns a boolean if a field has been set.
func (o *ContentDTO) HasGpgUrl() bool {
	if o != nil && !IsNil(o.GpgUrl) {
		return true
	}

	return false
}

// SetGpgUrl gets a reference to the given string and assigns it to the GpgUrl field.
func (o *ContentDTO) SetGpgUrl(v string) {
	o.GpgUrl = &v
}

// GetModifiedProductIds returns the ModifiedProductIds field value if set, zero value otherwise.
func (o *ContentDTO) GetModifiedProductIds() []string {
	if o == nil || IsNil(o.ModifiedProductIds) {
		var ret []string
		return ret
	}
	return o.ModifiedProductIds
}

// GetModifiedProductIdsOk returns a tuple with the ModifiedProductIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentDTO) GetModifiedProductIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ModifiedProductIds) {
		return nil, false
	}
	return o.ModifiedProductIds, true
}

// HasModifiedProductIds returns a boolean if a field has been set.
func (o *ContentDTO) HasModifiedProductIds() bool {
	if o != nil && !IsNil(o.ModifiedProductIds) {
		return true
	}

	return false
}

// SetModifiedProductIds gets a reference to the given []string and assigns it to the ModifiedProductIds field.
func (o *ContentDTO) SetModifiedProductIds(v []string) {
	o.ModifiedProductIds = v
}

// GetArches returns the Arches field value if set, zero value otherwise.
func (o *ContentDTO) GetArches() string {
	if o == nil || IsNil(o.Arches) {
		var ret string
		return ret
	}
	return *o.Arches
}

// GetArchesOk returns a tuple with the Arches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentDTO) GetArchesOk() (*string, bool) {
	if o == nil || IsNil(o.Arches) {
		return nil, false
	}
	return o.Arches, true
}

// HasArches returns a boolean if a field has been set.
func (o *ContentDTO) HasArches() bool {
	if o != nil && !IsNil(o.Arches) {
		return true
	}

	return false
}

// SetArches gets a reference to the given string and assigns it to the Arches field.
func (o *ContentDTO) SetArches(v string) {
	o.Arches = &v
}

// GetMetadataExpire returns the MetadataExpire field value if set, zero value otherwise.
func (o *ContentDTO) GetMetadataExpire() int64 {
	if o == nil || IsNil(o.MetadataExpire) {
		var ret int64
		return ret
	}
	return *o.MetadataExpire
}

// GetMetadataExpireOk returns a tuple with the MetadataExpire field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentDTO) GetMetadataExpireOk() (*int64, bool) {
	if o == nil || IsNil(o.MetadataExpire) {
		return nil, false
	}
	return o.MetadataExpire, true
}

// HasMetadataExpire returns a boolean if a field has been set.
func (o *ContentDTO) HasMetadataExpire() bool {
	if o != nil && !IsNil(o.MetadataExpire) {
		return true
	}

	return false
}

// SetMetadataExpire gets a reference to the given int64 and assigns it to the MetadataExpire field.
func (o *ContentDTO) SetMetadataExpire(v int64) {
	o.MetadataExpire = &v
}

func (o ContentDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}
	if !IsNil(o.ContentUrl) {
		toSerialize["contentUrl"] = o.ContentUrl
	}
	if !IsNil(o.RequiredTags) {
		toSerialize["requiredTags"] = o.RequiredTags
	}
	if !IsNil(o.ReleaseVer) {
		toSerialize["releaseVer"] = o.ReleaseVer
	}
	if !IsNil(o.GpgUrl) {
		toSerialize["gpgUrl"] = o.GpgUrl
	}
	if !IsNil(o.ModifiedProductIds) {
		toSerialize["modifiedProductIds"] = o.ModifiedProductIds
	}
	if !IsNil(o.Arches) {
		toSerialize["arches"] = o.Arches
	}
	if !IsNil(o.MetadataExpire) {
		toSerialize["metadataExpire"] = o.MetadataExpire
	}
	return toSerialize, nil
}

type NullableContentDTO struct {
	value *ContentDTO
	isSet bool
}

func (v NullableContentDTO) Get() *ContentDTO {
	return v.value
}

func (v *NullableContentDTO) Set(val *ContentDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableContentDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableContentDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentDTO(val *ContentDTO) *NullableContentDTO {
	return &NullableContentDTO{value: val, isSet: true}
}

func (v NullableContentDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


