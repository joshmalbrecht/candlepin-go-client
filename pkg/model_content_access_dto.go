/*
Candlepin

Candlepin is a subscription management server written in Java. It helps with management of software subscriptions.

API version: 4.4.12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ContentAccessDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentAccessDTO{}

// ContentAccessDTO Represents content access
type ContentAccessDTO struct {
	ContentAccessMode *string `json:"contentAccessMode,omitempty"`
	ContentAccessModeList []string `json:"contentAccessModeList,omitempty"`
}

// NewContentAccessDTO instantiates a new ContentAccessDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentAccessDTO() *ContentAccessDTO {
	this := ContentAccessDTO{}
	return &this
}

// NewContentAccessDTOWithDefaults instantiates a new ContentAccessDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentAccessDTOWithDefaults() *ContentAccessDTO {
	this := ContentAccessDTO{}
	return &this
}

// GetContentAccessMode returns the ContentAccessMode field value if set, zero value otherwise.
func (o *ContentAccessDTO) GetContentAccessMode() string {
	if o == nil || IsNil(o.ContentAccessMode) {
		var ret string
		return ret
	}
	return *o.ContentAccessMode
}

// GetContentAccessModeOk returns a tuple with the ContentAccessMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentAccessDTO) GetContentAccessModeOk() (*string, bool) {
	if o == nil || IsNil(o.ContentAccessMode) {
		return nil, false
	}
	return o.ContentAccessMode, true
}

// HasContentAccessMode returns a boolean if a field has been set.
func (o *ContentAccessDTO) HasContentAccessMode() bool {
	if o != nil && !IsNil(o.ContentAccessMode) {
		return true
	}

	return false
}

// SetContentAccessMode gets a reference to the given string and assigns it to the ContentAccessMode field.
func (o *ContentAccessDTO) SetContentAccessMode(v string) {
	o.ContentAccessMode = &v
}

// GetContentAccessModeList returns the ContentAccessModeList field value if set, zero value otherwise.
func (o *ContentAccessDTO) GetContentAccessModeList() []string {
	if o == nil || IsNil(o.ContentAccessModeList) {
		var ret []string
		return ret
	}
	return o.ContentAccessModeList
}

// GetContentAccessModeListOk returns a tuple with the ContentAccessModeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentAccessDTO) GetContentAccessModeListOk() ([]string, bool) {
	if o == nil || IsNil(o.ContentAccessModeList) {
		return nil, false
	}
	return o.ContentAccessModeList, true
}

// HasContentAccessModeList returns a boolean if a field has been set.
func (o *ContentAccessDTO) HasContentAccessModeList() bool {
	if o != nil && !IsNil(o.ContentAccessModeList) {
		return true
	}

	return false
}

// SetContentAccessModeList gets a reference to the given []string and assigns it to the ContentAccessModeList field.
func (o *ContentAccessDTO) SetContentAccessModeList(v []string) {
	o.ContentAccessModeList = v
}

func (o ContentAccessDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentAccessDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContentAccessMode) {
		toSerialize["contentAccessMode"] = o.ContentAccessMode
	}
	if !IsNil(o.ContentAccessModeList) {
		toSerialize["contentAccessModeList"] = o.ContentAccessModeList
	}
	return toSerialize, nil
}

type NullableContentAccessDTO struct {
	value *ContentAccessDTO
	isSet bool
}

func (v NullableContentAccessDTO) Get() *ContentAccessDTO {
	return v.value
}

func (v *NullableContentAccessDTO) Set(val *ContentAccessDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableContentAccessDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableContentAccessDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentAccessDTO(val *ContentAccessDTO) *NullableContentAccessDTO {
	return &NullableContentAccessDTO{value: val, isSet: true}
}

func (v NullableContentAccessDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentAccessDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


