/*
Candlepin

Candlepin is a subscription management server written in Java. It helps with management of software subscriptions.

API version: 4.4.12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the PoolDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PoolDTO{}

// PoolDTO Represents a pool of products eligible to be consumed (entitled)
type PoolDTO struct {
	Created *time.Time `json:"created,omitempty"`
	Updated *time.Time `json:"updated,omitempty"`
	Id *string `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	Owner *NestedOwnerDTO `json:"owner,omitempty"`
	ActiveSubscription *bool `json:"activeSubscription,omitempty"`
	SourceEntitlement *NestedEntitlementDTO `json:"sourceEntitlement,omitempty"`
	Quantity *int64 `json:"quantity,omitempty"`
	StartDate *time.Time `json:"startDate,omitempty"`
	EndDate *time.Time `json:"endDate,omitempty"`
	Attributes []AttributeDTO `json:"attributes,omitempty"`
	RestrictedToUsername *string `json:"restrictedToUsername,omitempty"`
	ContractNumber *string `json:"contractNumber,omitempty"`
	AccountNumber *string `json:"accountNumber,omitempty"`
	OrderNumber *string `json:"orderNumber,omitempty"`
	Consumed *int64 `json:"consumed,omitempty"`
	Exported *int64 `json:"exported,omitempty"`
	Branding []BrandingDTO `json:"branding,omitempty"`
	CalculatedAttributes *map[string]string `json:"calculatedAttributes,omitempty"`
	UpstreamPoolId *string `json:"upstreamPoolId,omitempty"`
	UpstreamEntitlementId *string `json:"upstreamEntitlementId,omitempty"`
	UpstreamConsumerId *string `json:"upstreamConsumerId,omitempty"`
	ProductName *string `json:"productName,omitempty"`
	ProductId *string `json:"productId,omitempty"`
	ProductAttributes []AttributeDTO `json:"productAttributes,omitempty"`
	StackId *string `json:"stackId,omitempty"`
	Stacked *bool `json:"stacked,omitempty"`
	SourceStackId *string `json:"sourceStackId,omitempty"`
	DevelopmentPool *bool `json:"developmentPool,omitempty"`
	Href *string `json:"href,omitempty"`
	DerivedProductAttributes []AttributeDTO `json:"derivedProductAttributes,omitempty"`
	DerivedProductId *string `json:"derivedProductId,omitempty"`
	DerivedProductName *string `json:"derivedProductName,omitempty"`
	ProvidedProducts []ProvidedProductDTO `json:"providedProducts,omitempty"`
	DerivedProvidedProducts []ProvidedProductDTO `json:"derivedProvidedProducts,omitempty"`
	SubscriptionSubKey *string `json:"subscriptionSubKey,omitempty"`
	SubscriptionId *string `json:"subscriptionId,omitempty"`
	Managed *bool `json:"managed,omitempty"`
}

// NewPoolDTO instantiates a new PoolDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolDTO() *PoolDTO {
	this := PoolDTO{}
	return &this
}

// NewPoolDTOWithDefaults instantiates a new PoolDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolDTOWithDefaults() *PoolDTO {
	this := PoolDTO{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *PoolDTO) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *PoolDTO) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *PoolDTO) SetCreated(v time.Time) {
	o.Created = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *PoolDTO) GetUpdated() time.Time {
	if o == nil || IsNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *PoolDTO) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *PoolDTO) SetUpdated(v time.Time) {
	o.Updated = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PoolDTO) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PoolDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PoolDTO) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PoolDTO) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PoolDTO) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PoolDTO) SetType(v string) {
	o.Type = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *PoolDTO) GetOwner() NestedOwnerDTO {
	if o == nil || IsNil(o.Owner) {
		var ret NestedOwnerDTO
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetOwnerOk() (*NestedOwnerDTO, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *PoolDTO) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given NestedOwnerDTO and assigns it to the Owner field.
func (o *PoolDTO) SetOwner(v NestedOwnerDTO) {
	o.Owner = &v
}

// GetActiveSubscription returns the ActiveSubscription field value if set, zero value otherwise.
func (o *PoolDTO) GetActiveSubscription() bool {
	if o == nil || IsNil(o.ActiveSubscription) {
		var ret bool
		return ret
	}
	return *o.ActiveSubscription
}

// GetActiveSubscriptionOk returns a tuple with the ActiveSubscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetActiveSubscriptionOk() (*bool, bool) {
	if o == nil || IsNil(o.ActiveSubscription) {
		return nil, false
	}
	return o.ActiveSubscription, true
}

// HasActiveSubscription returns a boolean if a field has been set.
func (o *PoolDTO) HasActiveSubscription() bool {
	if o != nil && !IsNil(o.ActiveSubscription) {
		return true
	}

	return false
}

// SetActiveSubscription gets a reference to the given bool and assigns it to the ActiveSubscription field.
func (o *PoolDTO) SetActiveSubscription(v bool) {
	o.ActiveSubscription = &v
}

// GetSourceEntitlement returns the SourceEntitlement field value if set, zero value otherwise.
func (o *PoolDTO) GetSourceEntitlement() NestedEntitlementDTO {
	if o == nil || IsNil(o.SourceEntitlement) {
		var ret NestedEntitlementDTO
		return ret
	}
	return *o.SourceEntitlement
}

// GetSourceEntitlementOk returns a tuple with the SourceEntitlement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetSourceEntitlementOk() (*NestedEntitlementDTO, bool) {
	if o == nil || IsNil(o.SourceEntitlement) {
		return nil, false
	}
	return o.SourceEntitlement, true
}

// HasSourceEntitlement returns a boolean if a field has been set.
func (o *PoolDTO) HasSourceEntitlement() bool {
	if o != nil && !IsNil(o.SourceEntitlement) {
		return true
	}

	return false
}

// SetSourceEntitlement gets a reference to the given NestedEntitlementDTO and assigns it to the SourceEntitlement field.
func (o *PoolDTO) SetSourceEntitlement(v NestedEntitlementDTO) {
	o.SourceEntitlement = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *PoolDTO) GetQuantity() int64 {
	if o == nil || IsNil(o.Quantity) {
		var ret int64
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetQuantityOk() (*int64, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *PoolDTO) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int64 and assigns it to the Quantity field.
func (o *PoolDTO) SetQuantity(v int64) {
	o.Quantity = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *PoolDTO) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *PoolDTO) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *PoolDTO) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *PoolDTO) GetEndDate() time.Time {
	if o == nil || IsNil(o.EndDate) {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *PoolDTO) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *PoolDTO) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *PoolDTO) GetAttributes() []AttributeDTO {
	if o == nil || IsNil(o.Attributes) {
		var ret []AttributeDTO
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetAttributesOk() ([]AttributeDTO, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *PoolDTO) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []AttributeDTO and assigns it to the Attributes field.
func (o *PoolDTO) SetAttributes(v []AttributeDTO) {
	o.Attributes = v
}

// GetRestrictedToUsername returns the RestrictedToUsername field value if set, zero value otherwise.
func (o *PoolDTO) GetRestrictedToUsername() string {
	if o == nil || IsNil(o.RestrictedToUsername) {
		var ret string
		return ret
	}
	return *o.RestrictedToUsername
}

// GetRestrictedToUsernameOk returns a tuple with the RestrictedToUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetRestrictedToUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.RestrictedToUsername) {
		return nil, false
	}
	return o.RestrictedToUsername, true
}

// HasRestrictedToUsername returns a boolean if a field has been set.
func (o *PoolDTO) HasRestrictedToUsername() bool {
	if o != nil && !IsNil(o.RestrictedToUsername) {
		return true
	}

	return false
}

// SetRestrictedToUsername gets a reference to the given string and assigns it to the RestrictedToUsername field.
func (o *PoolDTO) SetRestrictedToUsername(v string) {
	o.RestrictedToUsername = &v
}

// GetContractNumber returns the ContractNumber field value if set, zero value otherwise.
func (o *PoolDTO) GetContractNumber() string {
	if o == nil || IsNil(o.ContractNumber) {
		var ret string
		return ret
	}
	return *o.ContractNumber
}

// GetContractNumberOk returns a tuple with the ContractNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetContractNumberOk() (*string, bool) {
	if o == nil || IsNil(o.ContractNumber) {
		return nil, false
	}
	return o.ContractNumber, true
}

// HasContractNumber returns a boolean if a field has been set.
func (o *PoolDTO) HasContractNumber() bool {
	if o != nil && !IsNil(o.ContractNumber) {
		return true
	}

	return false
}

// SetContractNumber gets a reference to the given string and assigns it to the ContractNumber field.
func (o *PoolDTO) SetContractNumber(v string) {
	o.ContractNumber = &v
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *PoolDTO) GetAccountNumber() string {
	if o == nil || IsNil(o.AccountNumber) {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNumber) {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *PoolDTO) HasAccountNumber() bool {
	if o != nil && !IsNil(o.AccountNumber) {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *PoolDTO) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetOrderNumber returns the OrderNumber field value if set, zero value otherwise.
func (o *PoolDTO) GetOrderNumber() string {
	if o == nil || IsNil(o.OrderNumber) {
		var ret string
		return ret
	}
	return *o.OrderNumber
}

// GetOrderNumberOk returns a tuple with the OrderNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetOrderNumberOk() (*string, bool) {
	if o == nil || IsNil(o.OrderNumber) {
		return nil, false
	}
	return o.OrderNumber, true
}

// HasOrderNumber returns a boolean if a field has been set.
func (o *PoolDTO) HasOrderNumber() bool {
	if o != nil && !IsNil(o.OrderNumber) {
		return true
	}

	return false
}

// SetOrderNumber gets a reference to the given string and assigns it to the OrderNumber field.
func (o *PoolDTO) SetOrderNumber(v string) {
	o.OrderNumber = &v
}

// GetConsumed returns the Consumed field value if set, zero value otherwise.
func (o *PoolDTO) GetConsumed() int64 {
	if o == nil || IsNil(o.Consumed) {
		var ret int64
		return ret
	}
	return *o.Consumed
}

// GetConsumedOk returns a tuple with the Consumed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetConsumedOk() (*int64, bool) {
	if o == nil || IsNil(o.Consumed) {
		return nil, false
	}
	return o.Consumed, true
}

// HasConsumed returns a boolean if a field has been set.
func (o *PoolDTO) HasConsumed() bool {
	if o != nil && !IsNil(o.Consumed) {
		return true
	}

	return false
}

// SetConsumed gets a reference to the given int64 and assigns it to the Consumed field.
func (o *PoolDTO) SetConsumed(v int64) {
	o.Consumed = &v
}

// GetExported returns the Exported field value if set, zero value otherwise.
func (o *PoolDTO) GetExported() int64 {
	if o == nil || IsNil(o.Exported) {
		var ret int64
		return ret
	}
	return *o.Exported
}

// GetExportedOk returns a tuple with the Exported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetExportedOk() (*int64, bool) {
	if o == nil || IsNil(o.Exported) {
		return nil, false
	}
	return o.Exported, true
}

// HasExported returns a boolean if a field has been set.
func (o *PoolDTO) HasExported() bool {
	if o != nil && !IsNil(o.Exported) {
		return true
	}

	return false
}

// SetExported gets a reference to the given int64 and assigns it to the Exported field.
func (o *PoolDTO) SetExported(v int64) {
	o.Exported = &v
}

// GetBranding returns the Branding field value if set, zero value otherwise.
func (o *PoolDTO) GetBranding() []BrandingDTO {
	if o == nil || IsNil(o.Branding) {
		var ret []BrandingDTO
		return ret
	}
	return o.Branding
}

// GetBrandingOk returns a tuple with the Branding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetBrandingOk() ([]BrandingDTO, bool) {
	if o == nil || IsNil(o.Branding) {
		return nil, false
	}
	return o.Branding, true
}

// HasBranding returns a boolean if a field has been set.
func (o *PoolDTO) HasBranding() bool {
	if o != nil && !IsNil(o.Branding) {
		return true
	}

	return false
}

// SetBranding gets a reference to the given []BrandingDTO and assigns it to the Branding field.
func (o *PoolDTO) SetBranding(v []BrandingDTO) {
	o.Branding = v
}

// GetCalculatedAttributes returns the CalculatedAttributes field value if set, zero value otherwise.
func (o *PoolDTO) GetCalculatedAttributes() map[string]string {
	if o == nil || IsNil(o.CalculatedAttributes) {
		var ret map[string]string
		return ret
	}
	return *o.CalculatedAttributes
}

// GetCalculatedAttributesOk returns a tuple with the CalculatedAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetCalculatedAttributesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.CalculatedAttributes) {
		return nil, false
	}
	return o.CalculatedAttributes, true
}

// HasCalculatedAttributes returns a boolean if a field has been set.
func (o *PoolDTO) HasCalculatedAttributes() bool {
	if o != nil && !IsNil(o.CalculatedAttributes) {
		return true
	}

	return false
}

// SetCalculatedAttributes gets a reference to the given map[string]string and assigns it to the CalculatedAttributes field.
func (o *PoolDTO) SetCalculatedAttributes(v map[string]string) {
	o.CalculatedAttributes = &v
}

// GetUpstreamPoolId returns the UpstreamPoolId field value if set, zero value otherwise.
func (o *PoolDTO) GetUpstreamPoolId() string {
	if o == nil || IsNil(o.UpstreamPoolId) {
		var ret string
		return ret
	}
	return *o.UpstreamPoolId
}

// GetUpstreamPoolIdOk returns a tuple with the UpstreamPoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetUpstreamPoolIdOk() (*string, bool) {
	if o == nil || IsNil(o.UpstreamPoolId) {
		return nil, false
	}
	return o.UpstreamPoolId, true
}

// HasUpstreamPoolId returns a boolean if a field has been set.
func (o *PoolDTO) HasUpstreamPoolId() bool {
	if o != nil && !IsNil(o.UpstreamPoolId) {
		return true
	}

	return false
}

// SetUpstreamPoolId gets a reference to the given string and assigns it to the UpstreamPoolId field.
func (o *PoolDTO) SetUpstreamPoolId(v string) {
	o.UpstreamPoolId = &v
}

// GetUpstreamEntitlementId returns the UpstreamEntitlementId field value if set, zero value otherwise.
func (o *PoolDTO) GetUpstreamEntitlementId() string {
	if o == nil || IsNil(o.UpstreamEntitlementId) {
		var ret string
		return ret
	}
	return *o.UpstreamEntitlementId
}

// GetUpstreamEntitlementIdOk returns a tuple with the UpstreamEntitlementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetUpstreamEntitlementIdOk() (*string, bool) {
	if o == nil || IsNil(o.UpstreamEntitlementId) {
		return nil, false
	}
	return o.UpstreamEntitlementId, true
}

// HasUpstreamEntitlementId returns a boolean if a field has been set.
func (o *PoolDTO) HasUpstreamEntitlementId() bool {
	if o != nil && !IsNil(o.UpstreamEntitlementId) {
		return true
	}

	return false
}

// SetUpstreamEntitlementId gets a reference to the given string and assigns it to the UpstreamEntitlementId field.
func (o *PoolDTO) SetUpstreamEntitlementId(v string) {
	o.UpstreamEntitlementId = &v
}

// GetUpstreamConsumerId returns the UpstreamConsumerId field value if set, zero value otherwise.
func (o *PoolDTO) GetUpstreamConsumerId() string {
	if o == nil || IsNil(o.UpstreamConsumerId) {
		var ret string
		return ret
	}
	return *o.UpstreamConsumerId
}

// GetUpstreamConsumerIdOk returns a tuple with the UpstreamConsumerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetUpstreamConsumerIdOk() (*string, bool) {
	if o == nil || IsNil(o.UpstreamConsumerId) {
		return nil, false
	}
	return o.UpstreamConsumerId, true
}

// HasUpstreamConsumerId returns a boolean if a field has been set.
func (o *PoolDTO) HasUpstreamConsumerId() bool {
	if o != nil && !IsNil(o.UpstreamConsumerId) {
		return true
	}

	return false
}

// SetUpstreamConsumerId gets a reference to the given string and assigns it to the UpstreamConsumerId field.
func (o *PoolDTO) SetUpstreamConsumerId(v string) {
	o.UpstreamConsumerId = &v
}

// GetProductName returns the ProductName field value if set, zero value otherwise.
func (o *PoolDTO) GetProductName() string {
	if o == nil || IsNil(o.ProductName) {
		var ret string
		return ret
	}
	return *o.ProductName
}

// GetProductNameOk returns a tuple with the ProductName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetProductNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProductName) {
		return nil, false
	}
	return o.ProductName, true
}

// HasProductName returns a boolean if a field has been set.
func (o *PoolDTO) HasProductName() bool {
	if o != nil && !IsNil(o.ProductName) {
		return true
	}

	return false
}

// SetProductName gets a reference to the given string and assigns it to the ProductName field.
func (o *PoolDTO) SetProductName(v string) {
	o.ProductName = &v
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *PoolDTO) GetProductId() string {
	if o == nil || IsNil(o.ProductId) {
		var ret string
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetProductIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *PoolDTO) HasProductId() bool {
	if o != nil && !IsNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given string and assigns it to the ProductId field.
func (o *PoolDTO) SetProductId(v string) {
	o.ProductId = &v
}

// GetProductAttributes returns the ProductAttributes field value if set, zero value otherwise.
func (o *PoolDTO) GetProductAttributes() []AttributeDTO {
	if o == nil || IsNil(o.ProductAttributes) {
		var ret []AttributeDTO
		return ret
	}
	return o.ProductAttributes
}

// GetProductAttributesOk returns a tuple with the ProductAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetProductAttributesOk() ([]AttributeDTO, bool) {
	if o == nil || IsNil(o.ProductAttributes) {
		return nil, false
	}
	return o.ProductAttributes, true
}

// HasProductAttributes returns a boolean if a field has been set.
func (o *PoolDTO) HasProductAttributes() bool {
	if o != nil && !IsNil(o.ProductAttributes) {
		return true
	}

	return false
}

// SetProductAttributes gets a reference to the given []AttributeDTO and assigns it to the ProductAttributes field.
func (o *PoolDTO) SetProductAttributes(v []AttributeDTO) {
	o.ProductAttributes = v
}

// GetStackId returns the StackId field value if set, zero value otherwise.
func (o *PoolDTO) GetStackId() string {
	if o == nil || IsNil(o.StackId) {
		var ret string
		return ret
	}
	return *o.StackId
}

// GetStackIdOk returns a tuple with the StackId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetStackIdOk() (*string, bool) {
	if o == nil || IsNil(o.StackId) {
		return nil, false
	}
	return o.StackId, true
}

// HasStackId returns a boolean if a field has been set.
func (o *PoolDTO) HasStackId() bool {
	if o != nil && !IsNil(o.StackId) {
		return true
	}

	return false
}

// SetStackId gets a reference to the given string and assigns it to the StackId field.
func (o *PoolDTO) SetStackId(v string) {
	o.StackId = &v
}

// GetStacked returns the Stacked field value if set, zero value otherwise.
func (o *PoolDTO) GetStacked() bool {
	if o == nil || IsNil(o.Stacked) {
		var ret bool
		return ret
	}
	return *o.Stacked
}

// GetStackedOk returns a tuple with the Stacked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetStackedOk() (*bool, bool) {
	if o == nil || IsNil(o.Stacked) {
		return nil, false
	}
	return o.Stacked, true
}

// HasStacked returns a boolean if a field has been set.
func (o *PoolDTO) HasStacked() bool {
	if o != nil && !IsNil(o.Stacked) {
		return true
	}

	return false
}

// SetStacked gets a reference to the given bool and assigns it to the Stacked field.
func (o *PoolDTO) SetStacked(v bool) {
	o.Stacked = &v
}

// GetSourceStackId returns the SourceStackId field value if set, zero value otherwise.
func (o *PoolDTO) GetSourceStackId() string {
	if o == nil || IsNil(o.SourceStackId) {
		var ret string
		return ret
	}
	return *o.SourceStackId
}

// GetSourceStackIdOk returns a tuple with the SourceStackId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetSourceStackIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceStackId) {
		return nil, false
	}
	return o.SourceStackId, true
}

// HasSourceStackId returns a boolean if a field has been set.
func (o *PoolDTO) HasSourceStackId() bool {
	if o != nil && !IsNil(o.SourceStackId) {
		return true
	}

	return false
}

// SetSourceStackId gets a reference to the given string and assigns it to the SourceStackId field.
func (o *PoolDTO) SetSourceStackId(v string) {
	o.SourceStackId = &v
}

// GetDevelopmentPool returns the DevelopmentPool field value if set, zero value otherwise.
func (o *PoolDTO) GetDevelopmentPool() bool {
	if o == nil || IsNil(o.DevelopmentPool) {
		var ret bool
		return ret
	}
	return *o.DevelopmentPool
}

// GetDevelopmentPoolOk returns a tuple with the DevelopmentPool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetDevelopmentPoolOk() (*bool, bool) {
	if o == nil || IsNil(o.DevelopmentPool) {
		return nil, false
	}
	return o.DevelopmentPool, true
}

// HasDevelopmentPool returns a boolean if a field has been set.
func (o *PoolDTO) HasDevelopmentPool() bool {
	if o != nil && !IsNil(o.DevelopmentPool) {
		return true
	}

	return false
}

// SetDevelopmentPool gets a reference to the given bool and assigns it to the DevelopmentPool field.
func (o *PoolDTO) SetDevelopmentPool(v bool) {
	o.DevelopmentPool = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *PoolDTO) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *PoolDTO) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *PoolDTO) SetHref(v string) {
	o.Href = &v
}

// GetDerivedProductAttributes returns the DerivedProductAttributes field value if set, zero value otherwise.
func (o *PoolDTO) GetDerivedProductAttributes() []AttributeDTO {
	if o == nil || IsNil(o.DerivedProductAttributes) {
		var ret []AttributeDTO
		return ret
	}
	return o.DerivedProductAttributes
}

// GetDerivedProductAttributesOk returns a tuple with the DerivedProductAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetDerivedProductAttributesOk() ([]AttributeDTO, bool) {
	if o == nil || IsNil(o.DerivedProductAttributes) {
		return nil, false
	}
	return o.DerivedProductAttributes, true
}

// HasDerivedProductAttributes returns a boolean if a field has been set.
func (o *PoolDTO) HasDerivedProductAttributes() bool {
	if o != nil && !IsNil(o.DerivedProductAttributes) {
		return true
	}

	return false
}

// SetDerivedProductAttributes gets a reference to the given []AttributeDTO and assigns it to the DerivedProductAttributes field.
func (o *PoolDTO) SetDerivedProductAttributes(v []AttributeDTO) {
	o.DerivedProductAttributes = v
}

// GetDerivedProductId returns the DerivedProductId field value if set, zero value otherwise.
func (o *PoolDTO) GetDerivedProductId() string {
	if o == nil || IsNil(o.DerivedProductId) {
		var ret string
		return ret
	}
	return *o.DerivedProductId
}

// GetDerivedProductIdOk returns a tuple with the DerivedProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetDerivedProductIdOk() (*string, bool) {
	if o == nil || IsNil(o.DerivedProductId) {
		return nil, false
	}
	return o.DerivedProductId, true
}

// HasDerivedProductId returns a boolean if a field has been set.
func (o *PoolDTO) HasDerivedProductId() bool {
	if o != nil && !IsNil(o.DerivedProductId) {
		return true
	}

	return false
}

// SetDerivedProductId gets a reference to the given string and assigns it to the DerivedProductId field.
func (o *PoolDTO) SetDerivedProductId(v string) {
	o.DerivedProductId = &v
}

// GetDerivedProductName returns the DerivedProductName field value if set, zero value otherwise.
func (o *PoolDTO) GetDerivedProductName() string {
	if o == nil || IsNil(o.DerivedProductName) {
		var ret string
		return ret
	}
	return *o.DerivedProductName
}

// GetDerivedProductNameOk returns a tuple with the DerivedProductName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetDerivedProductNameOk() (*string, bool) {
	if o == nil || IsNil(o.DerivedProductName) {
		return nil, false
	}
	return o.DerivedProductName, true
}

// HasDerivedProductName returns a boolean if a field has been set.
func (o *PoolDTO) HasDerivedProductName() bool {
	if o != nil && !IsNil(o.DerivedProductName) {
		return true
	}

	return false
}

// SetDerivedProductName gets a reference to the given string and assigns it to the DerivedProductName field.
func (o *PoolDTO) SetDerivedProductName(v string) {
	o.DerivedProductName = &v
}

// GetProvidedProducts returns the ProvidedProducts field value if set, zero value otherwise.
func (o *PoolDTO) GetProvidedProducts() []ProvidedProductDTO {
	if o == nil || IsNil(o.ProvidedProducts) {
		var ret []ProvidedProductDTO
		return ret
	}
	return o.ProvidedProducts
}

// GetProvidedProductsOk returns a tuple with the ProvidedProducts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetProvidedProductsOk() ([]ProvidedProductDTO, bool) {
	if o == nil || IsNil(o.ProvidedProducts) {
		return nil, false
	}
	return o.ProvidedProducts, true
}

// HasProvidedProducts returns a boolean if a field has been set.
func (o *PoolDTO) HasProvidedProducts() bool {
	if o != nil && !IsNil(o.ProvidedProducts) {
		return true
	}

	return false
}

// SetProvidedProducts gets a reference to the given []ProvidedProductDTO and assigns it to the ProvidedProducts field.
func (o *PoolDTO) SetProvidedProducts(v []ProvidedProductDTO) {
	o.ProvidedProducts = v
}

// GetDerivedProvidedProducts returns the DerivedProvidedProducts field value if set, zero value otherwise.
func (o *PoolDTO) GetDerivedProvidedProducts() []ProvidedProductDTO {
	if o == nil || IsNil(o.DerivedProvidedProducts) {
		var ret []ProvidedProductDTO
		return ret
	}
	return o.DerivedProvidedProducts
}

// GetDerivedProvidedProductsOk returns a tuple with the DerivedProvidedProducts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetDerivedProvidedProductsOk() ([]ProvidedProductDTO, bool) {
	if o == nil || IsNil(o.DerivedProvidedProducts) {
		return nil, false
	}
	return o.DerivedProvidedProducts, true
}

// HasDerivedProvidedProducts returns a boolean if a field has been set.
func (o *PoolDTO) HasDerivedProvidedProducts() bool {
	if o != nil && !IsNil(o.DerivedProvidedProducts) {
		return true
	}

	return false
}

// SetDerivedProvidedProducts gets a reference to the given []ProvidedProductDTO and assigns it to the DerivedProvidedProducts field.
func (o *PoolDTO) SetDerivedProvidedProducts(v []ProvidedProductDTO) {
	o.DerivedProvidedProducts = v
}

// GetSubscriptionSubKey returns the SubscriptionSubKey field value if set, zero value otherwise.
func (o *PoolDTO) GetSubscriptionSubKey() string {
	if o == nil || IsNil(o.SubscriptionSubKey) {
		var ret string
		return ret
	}
	return *o.SubscriptionSubKey
}

// GetSubscriptionSubKeyOk returns a tuple with the SubscriptionSubKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetSubscriptionSubKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriptionSubKey) {
		return nil, false
	}
	return o.SubscriptionSubKey, true
}

// HasSubscriptionSubKey returns a boolean if a field has been set.
func (o *PoolDTO) HasSubscriptionSubKey() bool {
	if o != nil && !IsNil(o.SubscriptionSubKey) {
		return true
	}

	return false
}

// SetSubscriptionSubKey gets a reference to the given string and assigns it to the SubscriptionSubKey field.
func (o *PoolDTO) SetSubscriptionSubKey(v string) {
	o.SubscriptionSubKey = &v
}

// GetSubscriptionId returns the SubscriptionId field value if set, zero value otherwise.
func (o *PoolDTO) GetSubscriptionId() string {
	if o == nil || IsNil(o.SubscriptionId) {
		var ret string
		return ret
	}
	return *o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetSubscriptionIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriptionId) {
		return nil, false
	}
	return o.SubscriptionId, true
}

// HasSubscriptionId returns a boolean if a field has been set.
func (o *PoolDTO) HasSubscriptionId() bool {
	if o != nil && !IsNil(o.SubscriptionId) {
		return true
	}

	return false
}

// SetSubscriptionId gets a reference to the given string and assigns it to the SubscriptionId field.
func (o *PoolDTO) SetSubscriptionId(v string) {
	o.SubscriptionId = &v
}

// GetManaged returns the Managed field value if set, zero value otherwise.
func (o *PoolDTO) GetManaged() bool {
	if o == nil || IsNil(o.Managed) {
		var ret bool
		return ret
	}
	return *o.Managed
}

// GetManagedOk returns a tuple with the Managed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDTO) GetManagedOk() (*bool, bool) {
	if o == nil || IsNil(o.Managed) {
		return nil, false
	}
	return o.Managed, true
}

// HasManaged returns a boolean if a field has been set.
func (o *PoolDTO) HasManaged() bool {
	if o != nil && !IsNil(o.Managed) {
		return true
	}

	return false
}

// SetManaged gets a reference to the given bool and assigns it to the Managed field.
func (o *PoolDTO) SetManaged(v bool) {
	o.Managed = &v
}

func (o PoolDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PoolDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.ActiveSubscription) {
		toSerialize["activeSubscription"] = o.ActiveSubscription
	}
	if !IsNil(o.SourceEntitlement) {
		toSerialize["sourceEntitlement"] = o.SourceEntitlement
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.RestrictedToUsername) {
		toSerialize["restrictedToUsername"] = o.RestrictedToUsername
	}
	if !IsNil(o.ContractNumber) {
		toSerialize["contractNumber"] = o.ContractNumber
	}
	if !IsNil(o.AccountNumber) {
		toSerialize["accountNumber"] = o.AccountNumber
	}
	if !IsNil(o.OrderNumber) {
		toSerialize["orderNumber"] = o.OrderNumber
	}
	if !IsNil(o.Consumed) {
		toSerialize["consumed"] = o.Consumed
	}
	if !IsNil(o.Exported) {
		toSerialize["exported"] = o.Exported
	}
	if !IsNil(o.Branding) {
		toSerialize["branding"] = o.Branding
	}
	if !IsNil(o.CalculatedAttributes) {
		toSerialize["calculatedAttributes"] = o.CalculatedAttributes
	}
	if !IsNil(o.UpstreamPoolId) {
		toSerialize["upstreamPoolId"] = o.UpstreamPoolId
	}
	if !IsNil(o.UpstreamEntitlementId) {
		toSerialize["upstreamEntitlementId"] = o.UpstreamEntitlementId
	}
	if !IsNil(o.UpstreamConsumerId) {
		toSerialize["upstreamConsumerId"] = o.UpstreamConsumerId
	}
	if !IsNil(o.ProductName) {
		toSerialize["productName"] = o.ProductName
	}
	if !IsNil(o.ProductId) {
		toSerialize["productId"] = o.ProductId
	}
	if !IsNil(o.ProductAttributes) {
		toSerialize["productAttributes"] = o.ProductAttributes
	}
	if !IsNil(o.StackId) {
		toSerialize["stackId"] = o.StackId
	}
	if !IsNil(o.Stacked) {
		toSerialize["stacked"] = o.Stacked
	}
	if !IsNil(o.SourceStackId) {
		toSerialize["sourceStackId"] = o.SourceStackId
	}
	if !IsNil(o.DevelopmentPool) {
		toSerialize["developmentPool"] = o.DevelopmentPool
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.DerivedProductAttributes) {
		toSerialize["derivedProductAttributes"] = o.DerivedProductAttributes
	}
	if !IsNil(o.DerivedProductId) {
		toSerialize["derivedProductId"] = o.DerivedProductId
	}
	if !IsNil(o.DerivedProductName) {
		toSerialize["derivedProductName"] = o.DerivedProductName
	}
	if !IsNil(o.ProvidedProducts) {
		toSerialize["providedProducts"] = o.ProvidedProducts
	}
	if !IsNil(o.DerivedProvidedProducts) {
		toSerialize["derivedProvidedProducts"] = o.DerivedProvidedProducts
	}
	if !IsNil(o.SubscriptionSubKey) {
		toSerialize["subscriptionSubKey"] = o.SubscriptionSubKey
	}
	if !IsNil(o.SubscriptionId) {
		toSerialize["subscriptionId"] = o.SubscriptionId
	}
	if !IsNil(o.Managed) {
		toSerialize["managed"] = o.Managed
	}
	return toSerialize, nil
}

type NullablePoolDTO struct {
	value *PoolDTO
	isSet bool
}

func (v NullablePoolDTO) Get() *PoolDTO {
	return v.value
}

func (v *NullablePoolDTO) Set(val *PoolDTO) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolDTO) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolDTO(val *PoolDTO) *NullablePoolDTO {
	return &NullablePoolDTO{value: val, isSet: true}
}

func (v NullablePoolDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


