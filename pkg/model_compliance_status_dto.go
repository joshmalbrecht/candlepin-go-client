/*
Candlepin

Candlepin is a subscription management server written in Java. It helps with management of software subscriptions.

API version: 4.4.12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ComplianceStatusDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComplianceStatusDTO{}

// ComplianceStatusDTO DTO representing compliance status
type ComplianceStatusDTO struct {
	Status *string `json:"status,omitempty"`
	Compliant *bool `json:"compliant,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	CompliantUntil *time.Time `json:"compliantUntil,omitempty"`
	CompliantProducts *map[string][]EntitlementDTO `json:"compliantProducts,omitempty"`
	PartiallyCompliantProducts *map[string][]EntitlementDTO `json:"partiallyCompliantProducts,omitempty"`
	PartialStacks *map[string][]EntitlementDTO `json:"partialStacks,omitempty"`
	NonCompliantProducts []string `json:"nonCompliantProducts,omitempty"`
	Reasons []ComplianceReasonDTO `json:"reasons,omitempty"`
	ProductComplianceDateRanges *map[string]DateRange `json:"productComplianceDateRanges,omitempty"`
}

// NewComplianceStatusDTO instantiates a new ComplianceStatusDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComplianceStatusDTO() *ComplianceStatusDTO {
	this := ComplianceStatusDTO{}
	return &this
}

// NewComplianceStatusDTOWithDefaults instantiates a new ComplianceStatusDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComplianceStatusDTOWithDefaults() *ComplianceStatusDTO {
	this := ComplianceStatusDTO{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ComplianceStatusDTO) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplianceStatusDTO) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ComplianceStatusDTO) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ComplianceStatusDTO) SetStatus(v string) {
	o.Status = &v
}

// GetCompliant returns the Compliant field value if set, zero value otherwise.
func (o *ComplianceStatusDTO) GetCompliant() bool {
	if o == nil || IsNil(o.Compliant) {
		var ret bool
		return ret
	}
	return *o.Compliant
}

// GetCompliantOk returns a tuple with the Compliant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplianceStatusDTO) GetCompliantOk() (*bool, bool) {
	if o == nil || IsNil(o.Compliant) {
		return nil, false
	}
	return o.Compliant, true
}

// HasCompliant returns a boolean if a field has been set.
func (o *ComplianceStatusDTO) HasCompliant() bool {
	if o != nil && !IsNil(o.Compliant) {
		return true
	}

	return false
}

// SetCompliant gets a reference to the given bool and assigns it to the Compliant field.
func (o *ComplianceStatusDTO) SetCompliant(v bool) {
	o.Compliant = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *ComplianceStatusDTO) GetDate() time.Time {
	if o == nil || IsNil(o.Date) {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplianceStatusDTO) GetDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *ComplianceStatusDTO) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *ComplianceStatusDTO) SetDate(v time.Time) {
	o.Date = &v
}

// GetCompliantUntil returns the CompliantUntil field value if set, zero value otherwise.
func (o *ComplianceStatusDTO) GetCompliantUntil() time.Time {
	if o == nil || IsNil(o.CompliantUntil) {
		var ret time.Time
		return ret
	}
	return *o.CompliantUntil
}

// GetCompliantUntilOk returns a tuple with the CompliantUntil field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplianceStatusDTO) GetCompliantUntilOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CompliantUntil) {
		return nil, false
	}
	return o.CompliantUntil, true
}

// HasCompliantUntil returns a boolean if a field has been set.
func (o *ComplianceStatusDTO) HasCompliantUntil() bool {
	if o != nil && !IsNil(o.CompliantUntil) {
		return true
	}

	return false
}

// SetCompliantUntil gets a reference to the given time.Time and assigns it to the CompliantUntil field.
func (o *ComplianceStatusDTO) SetCompliantUntil(v time.Time) {
	o.CompliantUntil = &v
}

// GetCompliantProducts returns the CompliantProducts field value if set, zero value otherwise.
func (o *ComplianceStatusDTO) GetCompliantProducts() map[string][]EntitlementDTO {
	if o == nil || IsNil(o.CompliantProducts) {
		var ret map[string][]EntitlementDTO
		return ret
	}
	return *o.CompliantProducts
}

// GetCompliantProductsOk returns a tuple with the CompliantProducts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplianceStatusDTO) GetCompliantProductsOk() (*map[string][]EntitlementDTO, bool) {
	if o == nil || IsNil(o.CompliantProducts) {
		return nil, false
	}
	return o.CompliantProducts, true
}

// HasCompliantProducts returns a boolean if a field has been set.
func (o *ComplianceStatusDTO) HasCompliantProducts() bool {
	if o != nil && !IsNil(o.CompliantProducts) {
		return true
	}

	return false
}

// SetCompliantProducts gets a reference to the given map[string][]EntitlementDTO and assigns it to the CompliantProducts field.
func (o *ComplianceStatusDTO) SetCompliantProducts(v map[string][]EntitlementDTO) {
	o.CompliantProducts = &v
}

// GetPartiallyCompliantProducts returns the PartiallyCompliantProducts field value if set, zero value otherwise.
func (o *ComplianceStatusDTO) GetPartiallyCompliantProducts() map[string][]EntitlementDTO {
	if o == nil || IsNil(o.PartiallyCompliantProducts) {
		var ret map[string][]EntitlementDTO
		return ret
	}
	return *o.PartiallyCompliantProducts
}

// GetPartiallyCompliantProductsOk returns a tuple with the PartiallyCompliantProducts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplianceStatusDTO) GetPartiallyCompliantProductsOk() (*map[string][]EntitlementDTO, bool) {
	if o == nil || IsNil(o.PartiallyCompliantProducts) {
		return nil, false
	}
	return o.PartiallyCompliantProducts, true
}

// HasPartiallyCompliantProducts returns a boolean if a field has been set.
func (o *ComplianceStatusDTO) HasPartiallyCompliantProducts() bool {
	if o != nil && !IsNil(o.PartiallyCompliantProducts) {
		return true
	}

	return false
}

// SetPartiallyCompliantProducts gets a reference to the given map[string][]EntitlementDTO and assigns it to the PartiallyCompliantProducts field.
func (o *ComplianceStatusDTO) SetPartiallyCompliantProducts(v map[string][]EntitlementDTO) {
	o.PartiallyCompliantProducts = &v
}

// GetPartialStacks returns the PartialStacks field value if set, zero value otherwise.
func (o *ComplianceStatusDTO) GetPartialStacks() map[string][]EntitlementDTO {
	if o == nil || IsNil(o.PartialStacks) {
		var ret map[string][]EntitlementDTO
		return ret
	}
	return *o.PartialStacks
}

// GetPartialStacksOk returns a tuple with the PartialStacks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplianceStatusDTO) GetPartialStacksOk() (*map[string][]EntitlementDTO, bool) {
	if o == nil || IsNil(o.PartialStacks) {
		return nil, false
	}
	return o.PartialStacks, true
}

// HasPartialStacks returns a boolean if a field has been set.
func (o *ComplianceStatusDTO) HasPartialStacks() bool {
	if o != nil && !IsNil(o.PartialStacks) {
		return true
	}

	return false
}

// SetPartialStacks gets a reference to the given map[string][]EntitlementDTO and assigns it to the PartialStacks field.
func (o *ComplianceStatusDTO) SetPartialStacks(v map[string][]EntitlementDTO) {
	o.PartialStacks = &v
}

// GetNonCompliantProducts returns the NonCompliantProducts field value if set, zero value otherwise.
func (o *ComplianceStatusDTO) GetNonCompliantProducts() []string {
	if o == nil || IsNil(o.NonCompliantProducts) {
		var ret []string
		return ret
	}
	return o.NonCompliantProducts
}

// GetNonCompliantProductsOk returns a tuple with the NonCompliantProducts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplianceStatusDTO) GetNonCompliantProductsOk() ([]string, bool) {
	if o == nil || IsNil(o.NonCompliantProducts) {
		return nil, false
	}
	return o.NonCompliantProducts, true
}

// HasNonCompliantProducts returns a boolean if a field has been set.
func (o *ComplianceStatusDTO) HasNonCompliantProducts() bool {
	if o != nil && !IsNil(o.NonCompliantProducts) {
		return true
	}

	return false
}

// SetNonCompliantProducts gets a reference to the given []string and assigns it to the NonCompliantProducts field.
func (o *ComplianceStatusDTO) SetNonCompliantProducts(v []string) {
	o.NonCompliantProducts = v
}

// GetReasons returns the Reasons field value if set, zero value otherwise.
func (o *ComplianceStatusDTO) GetReasons() []ComplianceReasonDTO {
	if o == nil || IsNil(o.Reasons) {
		var ret []ComplianceReasonDTO
		return ret
	}
	return o.Reasons
}

// GetReasonsOk returns a tuple with the Reasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplianceStatusDTO) GetReasonsOk() ([]ComplianceReasonDTO, bool) {
	if o == nil || IsNil(o.Reasons) {
		return nil, false
	}
	return o.Reasons, true
}

// HasReasons returns a boolean if a field has been set.
func (o *ComplianceStatusDTO) HasReasons() bool {
	if o != nil && !IsNil(o.Reasons) {
		return true
	}

	return false
}

// SetReasons gets a reference to the given []ComplianceReasonDTO and assigns it to the Reasons field.
func (o *ComplianceStatusDTO) SetReasons(v []ComplianceReasonDTO) {
	o.Reasons = v
}

// GetProductComplianceDateRanges returns the ProductComplianceDateRanges field value if set, zero value otherwise.
func (o *ComplianceStatusDTO) GetProductComplianceDateRanges() map[string]DateRange {
	if o == nil || IsNil(o.ProductComplianceDateRanges) {
		var ret map[string]DateRange
		return ret
	}
	return *o.ProductComplianceDateRanges
}

// GetProductComplianceDateRangesOk returns a tuple with the ProductComplianceDateRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplianceStatusDTO) GetProductComplianceDateRangesOk() (*map[string]DateRange, bool) {
	if o == nil || IsNil(o.ProductComplianceDateRanges) {
		return nil, false
	}
	return o.ProductComplianceDateRanges, true
}

// HasProductComplianceDateRanges returns a boolean if a field has been set.
func (o *ComplianceStatusDTO) HasProductComplianceDateRanges() bool {
	if o != nil && !IsNil(o.ProductComplianceDateRanges) {
		return true
	}

	return false
}

// SetProductComplianceDateRanges gets a reference to the given map[string]DateRange and assigns it to the ProductComplianceDateRanges field.
func (o *ComplianceStatusDTO) SetProductComplianceDateRanges(v map[string]DateRange) {
	o.ProductComplianceDateRanges = &v
}

func (o ComplianceStatusDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComplianceStatusDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Compliant) {
		toSerialize["compliant"] = o.Compliant
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.CompliantUntil) {
		toSerialize["compliantUntil"] = o.CompliantUntil
	}
	if !IsNil(o.CompliantProducts) {
		toSerialize["compliantProducts"] = o.CompliantProducts
	}
	if !IsNil(o.PartiallyCompliantProducts) {
		toSerialize["partiallyCompliantProducts"] = o.PartiallyCompliantProducts
	}
	if !IsNil(o.PartialStacks) {
		toSerialize["partialStacks"] = o.PartialStacks
	}
	if !IsNil(o.NonCompliantProducts) {
		toSerialize["nonCompliantProducts"] = o.NonCompliantProducts
	}
	if !IsNil(o.Reasons) {
		toSerialize["reasons"] = o.Reasons
	}
	if !IsNil(o.ProductComplianceDateRanges) {
		toSerialize["productComplianceDateRanges"] = o.ProductComplianceDateRanges
	}
	return toSerialize, nil
}

type NullableComplianceStatusDTO struct {
	value *ComplianceStatusDTO
	isSet bool
}

func (v NullableComplianceStatusDTO) Get() *ComplianceStatusDTO {
	return v.value
}

func (v *NullableComplianceStatusDTO) Set(val *ComplianceStatusDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableComplianceStatusDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableComplianceStatusDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComplianceStatusDTO(val *ComplianceStatusDTO) *NullableComplianceStatusDTO {
	return &NullableComplianceStatusDTO{value: val, isSet: true}
}

func (v NullableComplianceStatusDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComplianceStatusDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


