/*
Candlepin

Candlepin is a subscription management server written in Java. It helps with management of software subscriptions.

API version: 4.4.12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ComplianceReasonDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComplianceReasonDTO{}

// ComplianceReasonDTO DTO representing a compliance reason
type ComplianceReasonDTO struct {
	Key *string `json:"key,omitempty"`
	Message *string `json:"message,omitempty"`
	Attributes *map[string]string `json:"attributes,omitempty"`
}

// NewComplianceReasonDTO instantiates a new ComplianceReasonDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComplianceReasonDTO() *ComplianceReasonDTO {
	this := ComplianceReasonDTO{}
	return &this
}

// NewComplianceReasonDTOWithDefaults instantiates a new ComplianceReasonDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComplianceReasonDTOWithDefaults() *ComplianceReasonDTO {
	this := ComplianceReasonDTO{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *ComplianceReasonDTO) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplianceReasonDTO) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *ComplianceReasonDTO) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *ComplianceReasonDTO) SetKey(v string) {
	o.Key = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ComplianceReasonDTO) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplianceReasonDTO) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ComplianceReasonDTO) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ComplianceReasonDTO) SetMessage(v string) {
	o.Message = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *ComplianceReasonDTO) GetAttributes() map[string]string {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string]string
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplianceReasonDTO) GetAttributesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *ComplianceReasonDTO) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]string and assigns it to the Attributes field.
func (o *ComplianceReasonDTO) SetAttributes(v map[string]string) {
	o.Attributes = &v
}

func (o ComplianceReasonDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComplianceReasonDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	return toSerialize, nil
}

type NullableComplianceReasonDTO struct {
	value *ComplianceReasonDTO
	isSet bool
}

func (v NullableComplianceReasonDTO) Get() *ComplianceReasonDTO {
	return v.value
}

func (v *NullableComplianceReasonDTO) Set(val *ComplianceReasonDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableComplianceReasonDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableComplianceReasonDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComplianceReasonDTO(val *ComplianceReasonDTO) *NullableComplianceReasonDTO {
	return &NullableComplianceReasonDTO{value: val, isSet: true}
}

func (v NullableComplianceReasonDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComplianceReasonDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


