/*
Candlepin

Candlepin is a subscription management server written in Java. It helps with management of software subscriptions.

API version: 4.4.12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CloudRegistrationDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudRegistrationDTO{}

// CloudRegistrationDTO Contains data for performing automatic cloud-based registration.
type CloudRegistrationDTO struct {
	Type string `json:"type"`
	Metadata string `json:"metadata"`
	Signature string `json:"signature"`
}

type _CloudRegistrationDTO CloudRegistrationDTO

// NewCloudRegistrationDTO instantiates a new CloudRegistrationDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudRegistrationDTO(type_ string, metadata string, signature string) *CloudRegistrationDTO {
	this := CloudRegistrationDTO{}
	this.Type = type_
	this.Metadata = metadata
	this.Signature = signature
	return &this
}

// NewCloudRegistrationDTOWithDefaults instantiates a new CloudRegistrationDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudRegistrationDTOWithDefaults() *CloudRegistrationDTO {
	this := CloudRegistrationDTO{}
	return &this
}

// GetType returns the Type field value
func (o *CloudRegistrationDTO) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CloudRegistrationDTO) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CloudRegistrationDTO) SetType(v string) {
	o.Type = v
}

// GetMetadata returns the Metadata field value
func (o *CloudRegistrationDTO) GetMetadata() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *CloudRegistrationDTO) GetMetadataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *CloudRegistrationDTO) SetMetadata(v string) {
	o.Metadata = v
}

// GetSignature returns the Signature field value
func (o *CloudRegistrationDTO) GetSignature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value
// and a boolean to check if the value has been set.
func (o *CloudRegistrationDTO) GetSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Signature, true
}

// SetSignature sets field value
func (o *CloudRegistrationDTO) SetSignature(v string) {
	o.Signature = v
}

func (o CloudRegistrationDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudRegistrationDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["metadata"] = o.Metadata
	toSerialize["signature"] = o.Signature
	return toSerialize, nil
}

func (o *CloudRegistrationDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"metadata",
		"signature",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCloudRegistrationDTO := _CloudRegistrationDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCloudRegistrationDTO)

	if err != nil {
		return err
	}

	*o = CloudRegistrationDTO(varCloudRegistrationDTO)

	return err
}

type NullableCloudRegistrationDTO struct {
	value *CloudRegistrationDTO
	isSet bool
}

func (v NullableCloudRegistrationDTO) Get() *CloudRegistrationDTO {
	return v.value
}

func (v *NullableCloudRegistrationDTO) Set(val *CloudRegistrationDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudRegistrationDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudRegistrationDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudRegistrationDTO(val *CloudRegistrationDTO) *NullableCloudRegistrationDTO {
	return &NullableCloudRegistrationDTO{value: val, isSet: true}
}

func (v NullableCloudRegistrationDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudRegistrationDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


