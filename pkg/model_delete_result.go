/*
Candlepin

Candlepin is a subscription management server written in Java. It helps with management of software subscriptions.

API version: 4.4.12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DeleteResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteResult{}

// DeleteResult Represents number of records removed via an unbind.
type DeleteResult struct {
	DeletedRecords *int32 `json:"deletedRecords,omitempty"`
}

// NewDeleteResult instantiates a new DeleteResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteResult() *DeleteResult {
	this := DeleteResult{}
	return &this
}

// NewDeleteResultWithDefaults instantiates a new DeleteResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteResultWithDefaults() *DeleteResult {
	this := DeleteResult{}
	return &this
}

// GetDeletedRecords returns the DeletedRecords field value if set, zero value otherwise.
func (o *DeleteResult) GetDeletedRecords() int32 {
	if o == nil || IsNil(o.DeletedRecords) {
		var ret int32
		return ret
	}
	return *o.DeletedRecords
}

// GetDeletedRecordsOk returns a tuple with the DeletedRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteResult) GetDeletedRecordsOk() (*int32, bool) {
	if o == nil || IsNil(o.DeletedRecords) {
		return nil, false
	}
	return o.DeletedRecords, true
}

// HasDeletedRecords returns a boolean if a field has been set.
func (o *DeleteResult) HasDeletedRecords() bool {
	if o != nil && !IsNil(o.DeletedRecords) {
		return true
	}

	return false
}

// SetDeletedRecords gets a reference to the given int32 and assigns it to the DeletedRecords field.
func (o *DeleteResult) SetDeletedRecords(v int32) {
	o.DeletedRecords = &v
}

func (o DeleteResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeletedRecords) {
		toSerialize["deletedRecords"] = o.DeletedRecords
	}
	return toSerialize, nil
}

type NullableDeleteResult struct {
	value *DeleteResult
	isSet bool
}

func (v NullableDeleteResult) Get() *DeleteResult {
	return v.value
}

func (v *NullableDeleteResult) Set(val *DeleteResult) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteResult) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteResult(val *DeleteResult) *NullableDeleteResult {
	return &NullableDeleteResult{value: val, isSet: true}
}

func (v NullableDeleteResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


