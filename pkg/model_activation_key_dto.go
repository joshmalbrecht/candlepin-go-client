/*
Candlepin

Candlepin is a subscription management server written in Java. It helps with management of software subscriptions.

API version: 4.4.12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ActivationKeyDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivationKeyDTO{}

// ActivationKeyDTO A token that allows registration without username/password and sets subscription and content related properties at registration.
type ActivationKeyDTO struct {
	Created *time.Time `json:"created,omitempty"`
	Updated *time.Time `json:"updated,omitempty"`
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Owner *NestedOwnerDTO `json:"owner,omitempty"`
	ReleaseVer *ReleaseVerDTO `json:"releaseVer,omitempty"`
	ServiceLevel *string `json:"serviceLevel,omitempty"`
	Usage *string `json:"usage,omitempty"`
	Role *string `json:"role,omitempty"`
	AddOns []string `json:"addOns,omitempty"`
	AutoAttach *bool `json:"autoAttach,omitempty"`
	Pools []ActivationKeyPoolDTO `json:"pools,omitempty"`
	Products []ActivationKeyProductDTO `json:"products,omitempty"`
	ContentOverrides []ContentOverrideDTO `json:"contentOverrides,omitempty"`
}

// NewActivationKeyDTO instantiates a new ActivationKeyDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivationKeyDTO() *ActivationKeyDTO {
	this := ActivationKeyDTO{}
	return &this
}

// NewActivationKeyDTOWithDefaults instantiates a new ActivationKeyDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivationKeyDTOWithDefaults() *ActivationKeyDTO {
	this := ActivationKeyDTO{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ActivationKeyDTO) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivationKeyDTO) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ActivationKeyDTO) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *ActivationKeyDTO) SetCreated(v time.Time) {
	o.Created = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *ActivationKeyDTO) GetUpdated() time.Time {
	if o == nil || IsNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivationKeyDTO) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *ActivationKeyDTO) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *ActivationKeyDTO) SetUpdated(v time.Time) {
	o.Updated = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ActivationKeyDTO) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivationKeyDTO) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ActivationKeyDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ActivationKeyDTO) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ActivationKeyDTO) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivationKeyDTO) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ActivationKeyDTO) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ActivationKeyDTO) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ActivationKeyDTO) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivationKeyDTO) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ActivationKeyDTO) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ActivationKeyDTO) SetDescription(v string) {
	o.Description = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *ActivationKeyDTO) GetOwner() NestedOwnerDTO {
	if o == nil || IsNil(o.Owner) {
		var ret NestedOwnerDTO
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivationKeyDTO) GetOwnerOk() (*NestedOwnerDTO, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *ActivationKeyDTO) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given NestedOwnerDTO and assigns it to the Owner field.
func (o *ActivationKeyDTO) SetOwner(v NestedOwnerDTO) {
	o.Owner = &v
}

// GetReleaseVer returns the ReleaseVer field value if set, zero value otherwise.
func (o *ActivationKeyDTO) GetReleaseVer() ReleaseVerDTO {
	if o == nil || IsNil(o.ReleaseVer) {
		var ret ReleaseVerDTO
		return ret
	}
	return *o.ReleaseVer
}

// GetReleaseVerOk returns a tuple with the ReleaseVer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivationKeyDTO) GetReleaseVerOk() (*ReleaseVerDTO, bool) {
	if o == nil || IsNil(o.ReleaseVer) {
		return nil, false
	}
	return o.ReleaseVer, true
}

// HasReleaseVer returns a boolean if a field has been set.
func (o *ActivationKeyDTO) HasReleaseVer() bool {
	if o != nil && !IsNil(o.ReleaseVer) {
		return true
	}

	return false
}

// SetReleaseVer gets a reference to the given ReleaseVerDTO and assigns it to the ReleaseVer field.
func (o *ActivationKeyDTO) SetReleaseVer(v ReleaseVerDTO) {
	o.ReleaseVer = &v
}

// GetServiceLevel returns the ServiceLevel field value if set, zero value otherwise.
func (o *ActivationKeyDTO) GetServiceLevel() string {
	if o == nil || IsNil(o.ServiceLevel) {
		var ret string
		return ret
	}
	return *o.ServiceLevel
}

// GetServiceLevelOk returns a tuple with the ServiceLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivationKeyDTO) GetServiceLevelOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceLevel) {
		return nil, false
	}
	return o.ServiceLevel, true
}

// HasServiceLevel returns a boolean if a field has been set.
func (o *ActivationKeyDTO) HasServiceLevel() bool {
	if o != nil && !IsNil(o.ServiceLevel) {
		return true
	}

	return false
}

// SetServiceLevel gets a reference to the given string and assigns it to the ServiceLevel field.
func (o *ActivationKeyDTO) SetServiceLevel(v string) {
	o.ServiceLevel = &v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *ActivationKeyDTO) GetUsage() string {
	if o == nil || IsNil(o.Usage) {
		var ret string
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivationKeyDTO) GetUsageOk() (*string, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *ActivationKeyDTO) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given string and assigns it to the Usage field.
func (o *ActivationKeyDTO) SetUsage(v string) {
	o.Usage = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *ActivationKeyDTO) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivationKeyDTO) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *ActivationKeyDTO) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *ActivationKeyDTO) SetRole(v string) {
	o.Role = &v
}

// GetAddOns returns the AddOns field value if set, zero value otherwise.
func (o *ActivationKeyDTO) GetAddOns() []string {
	if o == nil || IsNil(o.AddOns) {
		var ret []string
		return ret
	}
	return o.AddOns
}

// GetAddOnsOk returns a tuple with the AddOns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivationKeyDTO) GetAddOnsOk() ([]string, bool) {
	if o == nil || IsNil(o.AddOns) {
		return nil, false
	}
	return o.AddOns, true
}

// HasAddOns returns a boolean if a field has been set.
func (o *ActivationKeyDTO) HasAddOns() bool {
	if o != nil && !IsNil(o.AddOns) {
		return true
	}

	return false
}

// SetAddOns gets a reference to the given []string and assigns it to the AddOns field.
func (o *ActivationKeyDTO) SetAddOns(v []string) {
	o.AddOns = v
}

// GetAutoAttach returns the AutoAttach field value if set, zero value otherwise.
func (o *ActivationKeyDTO) GetAutoAttach() bool {
	if o == nil || IsNil(o.AutoAttach) {
		var ret bool
		return ret
	}
	return *o.AutoAttach
}

// GetAutoAttachOk returns a tuple with the AutoAttach field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivationKeyDTO) GetAutoAttachOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoAttach) {
		return nil, false
	}
	return o.AutoAttach, true
}

// HasAutoAttach returns a boolean if a field has been set.
func (o *ActivationKeyDTO) HasAutoAttach() bool {
	if o != nil && !IsNil(o.AutoAttach) {
		return true
	}

	return false
}

// SetAutoAttach gets a reference to the given bool and assigns it to the AutoAttach field.
func (o *ActivationKeyDTO) SetAutoAttach(v bool) {
	o.AutoAttach = &v
}

// GetPools returns the Pools field value if set, zero value otherwise.
func (o *ActivationKeyDTO) GetPools() []ActivationKeyPoolDTO {
	if o == nil || IsNil(o.Pools) {
		var ret []ActivationKeyPoolDTO
		return ret
	}
	return o.Pools
}

// GetPoolsOk returns a tuple with the Pools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivationKeyDTO) GetPoolsOk() ([]ActivationKeyPoolDTO, bool) {
	if o == nil || IsNil(o.Pools) {
		return nil, false
	}
	return o.Pools, true
}

// HasPools returns a boolean if a field has been set.
func (o *ActivationKeyDTO) HasPools() bool {
	if o != nil && !IsNil(o.Pools) {
		return true
	}

	return false
}

// SetPools gets a reference to the given []ActivationKeyPoolDTO and assigns it to the Pools field.
func (o *ActivationKeyDTO) SetPools(v []ActivationKeyPoolDTO) {
	o.Pools = v
}

// GetProducts returns the Products field value if set, zero value otherwise.
func (o *ActivationKeyDTO) GetProducts() []ActivationKeyProductDTO {
	if o == nil || IsNil(o.Products) {
		var ret []ActivationKeyProductDTO
		return ret
	}
	return o.Products
}

// GetProductsOk returns a tuple with the Products field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivationKeyDTO) GetProductsOk() ([]ActivationKeyProductDTO, bool) {
	if o == nil || IsNil(o.Products) {
		return nil, false
	}
	return o.Products, true
}

// HasProducts returns a boolean if a field has been set.
func (o *ActivationKeyDTO) HasProducts() bool {
	if o != nil && !IsNil(o.Products) {
		return true
	}

	return false
}

// SetProducts gets a reference to the given []ActivationKeyProductDTO and assigns it to the Products field.
func (o *ActivationKeyDTO) SetProducts(v []ActivationKeyProductDTO) {
	o.Products = v
}

// GetContentOverrides returns the ContentOverrides field value if set, zero value otherwise.
func (o *ActivationKeyDTO) GetContentOverrides() []ContentOverrideDTO {
	if o == nil || IsNil(o.ContentOverrides) {
		var ret []ContentOverrideDTO
		return ret
	}
	return o.ContentOverrides
}

// GetContentOverridesOk returns a tuple with the ContentOverrides field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivationKeyDTO) GetContentOverridesOk() ([]ContentOverrideDTO, bool) {
	if o == nil || IsNil(o.ContentOverrides) {
		return nil, false
	}
	return o.ContentOverrides, true
}

// HasContentOverrides returns a boolean if a field has been set.
func (o *ActivationKeyDTO) HasContentOverrides() bool {
	if o != nil && !IsNil(o.ContentOverrides) {
		return true
	}

	return false
}

// SetContentOverrides gets a reference to the given []ContentOverrideDTO and assigns it to the ContentOverrides field.
func (o *ActivationKeyDTO) SetContentOverrides(v []ContentOverrideDTO) {
	o.ContentOverrides = v
}

func (o ActivationKeyDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivationKeyDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.ReleaseVer) {
		toSerialize["releaseVer"] = o.ReleaseVer
	}
	if !IsNil(o.ServiceLevel) {
		toSerialize["serviceLevel"] = o.ServiceLevel
	}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.AddOns) {
		toSerialize["addOns"] = o.AddOns
	}
	if !IsNil(o.AutoAttach) {
		toSerialize["autoAttach"] = o.AutoAttach
	}
	if !IsNil(o.Pools) {
		toSerialize["pools"] = o.Pools
	}
	if !IsNil(o.Products) {
		toSerialize["products"] = o.Products
	}
	if !IsNil(o.ContentOverrides) {
		toSerialize["contentOverrides"] = o.ContentOverrides
	}
	return toSerialize, nil
}

type NullableActivationKeyDTO struct {
	value *ActivationKeyDTO
	isSet bool
}

func (v NullableActivationKeyDTO) Get() *ActivationKeyDTO {
	return v.value
}

func (v *NullableActivationKeyDTO) Set(val *ActivationKeyDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableActivationKeyDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableActivationKeyDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivationKeyDTO(val *ActivationKeyDTO) *NullableActivationKeyDTO {
	return &NullableActivationKeyDTO{value: val, isSet: true}
}

func (v NullableActivationKeyDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivationKeyDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


