/*
Candlepin

Candlepin is a subscription management server written in Java. It helps with management of software subscriptions.

API version: 4.4.12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ProductCertificateDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductCertificateDTO{}

// ProductCertificateDTO DTO representing product certificates presented to the API
type ProductCertificateDTO struct {
	Created *time.Time `json:"created,omitempty"`
	Updated *time.Time `json:"updated,omitempty"`
	Key *string `json:"key,omitempty"`
	Cert *string `json:"cert,omitempty"`
}

// NewProductCertificateDTO instantiates a new ProductCertificateDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductCertificateDTO() *ProductCertificateDTO {
	this := ProductCertificateDTO{}
	return &this
}

// NewProductCertificateDTOWithDefaults instantiates a new ProductCertificateDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductCertificateDTOWithDefaults() *ProductCertificateDTO {
	this := ProductCertificateDTO{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ProductCertificateDTO) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductCertificateDTO) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ProductCertificateDTO) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *ProductCertificateDTO) SetCreated(v time.Time) {
	o.Created = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *ProductCertificateDTO) GetUpdated() time.Time {
	if o == nil || IsNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductCertificateDTO) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *ProductCertificateDTO) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *ProductCertificateDTO) SetUpdated(v time.Time) {
	o.Updated = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *ProductCertificateDTO) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductCertificateDTO) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *ProductCertificateDTO) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *ProductCertificateDTO) SetKey(v string) {
	o.Key = &v
}

// GetCert returns the Cert field value if set, zero value otherwise.
func (o *ProductCertificateDTO) GetCert() string {
	if o == nil || IsNil(o.Cert) {
		var ret string
		return ret
	}
	return *o.Cert
}

// GetCertOk returns a tuple with the Cert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductCertificateDTO) GetCertOk() (*string, bool) {
	if o == nil || IsNil(o.Cert) {
		return nil, false
	}
	return o.Cert, true
}

// HasCert returns a boolean if a field has been set.
func (o *ProductCertificateDTO) HasCert() bool {
	if o != nil && !IsNil(o.Cert) {
		return true
	}

	return false
}

// SetCert gets a reference to the given string and assigns it to the Cert field.
func (o *ProductCertificateDTO) SetCert(v string) {
	o.Cert = &v
}

func (o ProductCertificateDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductCertificateDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Cert) {
		toSerialize["cert"] = o.Cert
	}
	return toSerialize, nil
}

type NullableProductCertificateDTO struct {
	value *ProductCertificateDTO
	isSet bool
}

func (v NullableProductCertificateDTO) Get() *ProductCertificateDTO {
	return v.value
}

func (v *NullableProductCertificateDTO) Set(val *ProductCertificateDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableProductCertificateDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableProductCertificateDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductCertificateDTO(val *ProductCertificateDTO) *NullableProductCertificateDTO {
	return &NullableProductCertificateDTO{value: val, isSet: true}
}

func (v NullableProductCertificateDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductCertificateDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


