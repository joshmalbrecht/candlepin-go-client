/*
Candlepin

Candlepin is a subscription management server written in Java. It helps with management of software subscriptions.

API version: 4.4.12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the TimestampedEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimestampedEntity{}

// TimestampedEntity struct for TimestampedEntity
type TimestampedEntity struct {
	Created *time.Time `json:"created,omitempty"`
	Updated *time.Time `json:"updated,omitempty"`
}

// NewTimestampedEntity instantiates a new TimestampedEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimestampedEntity() *TimestampedEntity {
	this := TimestampedEntity{}
	return &this
}

// NewTimestampedEntityWithDefaults instantiates a new TimestampedEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimestampedEntityWithDefaults() *TimestampedEntity {
	this := TimestampedEntity{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *TimestampedEntity) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimestampedEntity) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *TimestampedEntity) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *TimestampedEntity) SetCreated(v time.Time) {
	o.Created = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *TimestampedEntity) GetUpdated() time.Time {
	if o == nil || IsNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimestampedEntity) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *TimestampedEntity) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *TimestampedEntity) SetUpdated(v time.Time) {
	o.Updated = &v
}

func (o TimestampedEntity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimestampedEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	return toSerialize, nil
}

type NullableTimestampedEntity struct {
	value *TimestampedEntity
	isSet bool
}

func (v NullableTimestampedEntity) Get() *TimestampedEntity {
	return v.value
}

func (v *NullableTimestampedEntity) Set(val *TimestampedEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableTimestampedEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableTimestampedEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimestampedEntity(val *TimestampedEntity) *NullableTimestampedEntity {
	return &NullableTimestampedEntity{value: val, isSet: true}
}

func (v NullableTimestampedEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimestampedEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


