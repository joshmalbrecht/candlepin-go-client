/*
Candlepin

Candlepin is a subscription management server written in Java. It helps with management of software subscriptions.

API version: 4.4.12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the AsyncJobStatusDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AsyncJobStatusDTO{}

// AsyncJobStatusDTO DTO representing an async job status
type AsyncJobStatusDTO struct {
	Created *time.Time `json:"created,omitempty"`
	Updated *time.Time `json:"updated,omitempty"`
	Id *string `json:"id,omitempty"`
	Key *string `json:"key,omitempty"`
	Name *string `json:"name,omitempty"`
	Group *string `json:"group,omitempty"`
	Origin *string `json:"origin,omitempty"`
	Executor *string `json:"executor,omitempty"`
	Principal *string `json:"principal,omitempty"`
	State *string `json:"state,omitempty"`
	PreviousState *string `json:"previousState,omitempty"`
	StartTime *time.Time `json:"startTime,omitempty"`
	EndTime *time.Time `json:"endTime,omitempty"`
	Attempts *int32 `json:"attempts,omitempty"`
	MaxAttempts *int32 `json:"maxAttempts,omitempty"`
	StatusPath *string `json:"statusPath,omitempty"`
	// May contain a single message or job data as JSON
	ResultData map[string]interface{} `json:"resultData,omitempty"`
}

// NewAsyncJobStatusDTO instantiates a new AsyncJobStatusDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAsyncJobStatusDTO() *AsyncJobStatusDTO {
	this := AsyncJobStatusDTO{}
	return &this
}

// NewAsyncJobStatusDTOWithDefaults instantiates a new AsyncJobStatusDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAsyncJobStatusDTOWithDefaults() *AsyncJobStatusDTO {
	this := AsyncJobStatusDTO{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *AsyncJobStatusDTO) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncJobStatusDTO) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *AsyncJobStatusDTO) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *AsyncJobStatusDTO) SetCreated(v time.Time) {
	o.Created = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *AsyncJobStatusDTO) GetUpdated() time.Time {
	if o == nil || IsNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncJobStatusDTO) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *AsyncJobStatusDTO) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *AsyncJobStatusDTO) SetUpdated(v time.Time) {
	o.Updated = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AsyncJobStatusDTO) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncJobStatusDTO) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AsyncJobStatusDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AsyncJobStatusDTO) SetId(v string) {
	o.Id = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *AsyncJobStatusDTO) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncJobStatusDTO) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *AsyncJobStatusDTO) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *AsyncJobStatusDTO) SetKey(v string) {
	o.Key = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AsyncJobStatusDTO) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncJobStatusDTO) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AsyncJobStatusDTO) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AsyncJobStatusDTO) SetName(v string) {
	o.Name = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *AsyncJobStatusDTO) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncJobStatusDTO) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *AsyncJobStatusDTO) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *AsyncJobStatusDTO) SetGroup(v string) {
	o.Group = &v
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *AsyncJobStatusDTO) GetOrigin() string {
	if o == nil || IsNil(o.Origin) {
		var ret string
		return ret
	}
	return *o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncJobStatusDTO) GetOriginOk() (*string, bool) {
	if o == nil || IsNil(o.Origin) {
		return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *AsyncJobStatusDTO) HasOrigin() bool {
	if o != nil && !IsNil(o.Origin) {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given string and assigns it to the Origin field.
func (o *AsyncJobStatusDTO) SetOrigin(v string) {
	o.Origin = &v
}

// GetExecutor returns the Executor field value if set, zero value otherwise.
func (o *AsyncJobStatusDTO) GetExecutor() string {
	if o == nil || IsNil(o.Executor) {
		var ret string
		return ret
	}
	return *o.Executor
}

// GetExecutorOk returns a tuple with the Executor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncJobStatusDTO) GetExecutorOk() (*string, bool) {
	if o == nil || IsNil(o.Executor) {
		return nil, false
	}
	return o.Executor, true
}

// HasExecutor returns a boolean if a field has been set.
func (o *AsyncJobStatusDTO) HasExecutor() bool {
	if o != nil && !IsNil(o.Executor) {
		return true
	}

	return false
}

// SetExecutor gets a reference to the given string and assigns it to the Executor field.
func (o *AsyncJobStatusDTO) SetExecutor(v string) {
	o.Executor = &v
}

// GetPrincipal returns the Principal field value if set, zero value otherwise.
func (o *AsyncJobStatusDTO) GetPrincipal() string {
	if o == nil || IsNil(o.Principal) {
		var ret string
		return ret
	}
	return *o.Principal
}

// GetPrincipalOk returns a tuple with the Principal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncJobStatusDTO) GetPrincipalOk() (*string, bool) {
	if o == nil || IsNil(o.Principal) {
		return nil, false
	}
	return o.Principal, true
}

// HasPrincipal returns a boolean if a field has been set.
func (o *AsyncJobStatusDTO) HasPrincipal() bool {
	if o != nil && !IsNil(o.Principal) {
		return true
	}

	return false
}

// SetPrincipal gets a reference to the given string and assigns it to the Principal field.
func (o *AsyncJobStatusDTO) SetPrincipal(v string) {
	o.Principal = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *AsyncJobStatusDTO) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncJobStatusDTO) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *AsyncJobStatusDTO) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *AsyncJobStatusDTO) SetState(v string) {
	o.State = &v
}

// GetPreviousState returns the PreviousState field value if set, zero value otherwise.
func (o *AsyncJobStatusDTO) GetPreviousState() string {
	if o == nil || IsNil(o.PreviousState) {
		var ret string
		return ret
	}
	return *o.PreviousState
}

// GetPreviousStateOk returns a tuple with the PreviousState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncJobStatusDTO) GetPreviousStateOk() (*string, bool) {
	if o == nil || IsNil(o.PreviousState) {
		return nil, false
	}
	return o.PreviousState, true
}

// HasPreviousState returns a boolean if a field has been set.
func (o *AsyncJobStatusDTO) HasPreviousState() bool {
	if o != nil && !IsNil(o.PreviousState) {
		return true
	}

	return false
}

// SetPreviousState gets a reference to the given string and assigns it to the PreviousState field.
func (o *AsyncJobStatusDTO) SetPreviousState(v string) {
	o.PreviousState = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *AsyncJobStatusDTO) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime) {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncJobStatusDTO) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *AsyncJobStatusDTO) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *AsyncJobStatusDTO) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *AsyncJobStatusDTO) GetEndTime() time.Time {
	if o == nil || IsNil(o.EndTime) {
		var ret time.Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncJobStatusDTO) GetEndTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *AsyncJobStatusDTO) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given time.Time and assigns it to the EndTime field.
func (o *AsyncJobStatusDTO) SetEndTime(v time.Time) {
	o.EndTime = &v
}

// GetAttempts returns the Attempts field value if set, zero value otherwise.
func (o *AsyncJobStatusDTO) GetAttempts() int32 {
	if o == nil || IsNil(o.Attempts) {
		var ret int32
		return ret
	}
	return *o.Attempts
}

// GetAttemptsOk returns a tuple with the Attempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncJobStatusDTO) GetAttemptsOk() (*int32, bool) {
	if o == nil || IsNil(o.Attempts) {
		return nil, false
	}
	return o.Attempts, true
}

// HasAttempts returns a boolean if a field has been set.
func (o *AsyncJobStatusDTO) HasAttempts() bool {
	if o != nil && !IsNil(o.Attempts) {
		return true
	}

	return false
}

// SetAttempts gets a reference to the given int32 and assigns it to the Attempts field.
func (o *AsyncJobStatusDTO) SetAttempts(v int32) {
	o.Attempts = &v
}

// GetMaxAttempts returns the MaxAttempts field value if set, zero value otherwise.
func (o *AsyncJobStatusDTO) GetMaxAttempts() int32 {
	if o == nil || IsNil(o.MaxAttempts) {
		var ret int32
		return ret
	}
	return *o.MaxAttempts
}

// GetMaxAttemptsOk returns a tuple with the MaxAttempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncJobStatusDTO) GetMaxAttemptsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxAttempts) {
		return nil, false
	}
	return o.MaxAttempts, true
}

// HasMaxAttempts returns a boolean if a field has been set.
func (o *AsyncJobStatusDTO) HasMaxAttempts() bool {
	if o != nil && !IsNil(o.MaxAttempts) {
		return true
	}

	return false
}

// SetMaxAttempts gets a reference to the given int32 and assigns it to the MaxAttempts field.
func (o *AsyncJobStatusDTO) SetMaxAttempts(v int32) {
	o.MaxAttempts = &v
}

// GetStatusPath returns the StatusPath field value if set, zero value otherwise.
func (o *AsyncJobStatusDTO) GetStatusPath() string {
	if o == nil || IsNil(o.StatusPath) {
		var ret string
		return ret
	}
	return *o.StatusPath
}

// GetStatusPathOk returns a tuple with the StatusPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncJobStatusDTO) GetStatusPathOk() (*string, bool) {
	if o == nil || IsNil(o.StatusPath) {
		return nil, false
	}
	return o.StatusPath, true
}

// HasStatusPath returns a boolean if a field has been set.
func (o *AsyncJobStatusDTO) HasStatusPath() bool {
	if o != nil && !IsNil(o.StatusPath) {
		return true
	}

	return false
}

// SetStatusPath gets a reference to the given string and assigns it to the StatusPath field.
func (o *AsyncJobStatusDTO) SetStatusPath(v string) {
	o.StatusPath = &v
}

// GetResultData returns the ResultData field value if set, zero value otherwise.
func (o *AsyncJobStatusDTO) GetResultData() map[string]interface{} {
	if o == nil || IsNil(o.ResultData) {
		var ret map[string]interface{}
		return ret
	}
	return o.ResultData
}

// GetResultDataOk returns a tuple with the ResultData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncJobStatusDTO) GetResultDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ResultData) {
		return map[string]interface{}{}, false
	}
	return o.ResultData, true
}

// HasResultData returns a boolean if a field has been set.
func (o *AsyncJobStatusDTO) HasResultData() bool {
	if o != nil && !IsNil(o.ResultData) {
		return true
	}

	return false
}

// SetResultData gets a reference to the given map[string]interface{} and assigns it to the ResultData field.
func (o *AsyncJobStatusDTO) SetResultData(v map[string]interface{}) {
	o.ResultData = v
}

func (o AsyncJobStatusDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AsyncJobStatusDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Origin) {
		toSerialize["origin"] = o.Origin
	}
	if !IsNil(o.Executor) {
		toSerialize["executor"] = o.Executor
	}
	if !IsNil(o.Principal) {
		toSerialize["principal"] = o.Principal
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.PreviousState) {
		toSerialize["previousState"] = o.PreviousState
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	if !IsNil(o.Attempts) {
		toSerialize["attempts"] = o.Attempts
	}
	if !IsNil(o.MaxAttempts) {
		toSerialize["maxAttempts"] = o.MaxAttempts
	}
	if !IsNil(o.StatusPath) {
		toSerialize["statusPath"] = o.StatusPath
	}
	if !IsNil(o.ResultData) {
		toSerialize["resultData"] = o.ResultData
	}
	return toSerialize, nil
}

type NullableAsyncJobStatusDTO struct {
	value *AsyncJobStatusDTO
	isSet bool
}

func (v NullableAsyncJobStatusDTO) Get() *AsyncJobStatusDTO {
	return v.value
}

func (v *NullableAsyncJobStatusDTO) Set(val *AsyncJobStatusDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableAsyncJobStatusDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableAsyncJobStatusDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAsyncJobStatusDTO(val *AsyncJobStatusDTO) *NullableAsyncJobStatusDTO {
	return &NullableAsyncJobStatusDTO{value: val, isSet: true}
}

func (v NullableAsyncJobStatusDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAsyncJobStatusDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


