/*
Candlepin

Candlepin is a subscription management server written in Java. It helps with management of software subscriptions.

API version: 4.4.12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReleaseVerDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReleaseVerDTO{}

// ReleaseVerDTO struct for ReleaseVerDTO
type ReleaseVerDTO struct {
	ReleaseVer *string `json:"releaseVer,omitempty"`
}

// NewReleaseVerDTO instantiates a new ReleaseVerDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReleaseVerDTO() *ReleaseVerDTO {
	this := ReleaseVerDTO{}
	return &this
}

// NewReleaseVerDTOWithDefaults instantiates a new ReleaseVerDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseVerDTOWithDefaults() *ReleaseVerDTO {
	this := ReleaseVerDTO{}
	return &this
}

// GetReleaseVer returns the ReleaseVer field value if set, zero value otherwise.
func (o *ReleaseVerDTO) GetReleaseVer() string {
	if o == nil || IsNil(o.ReleaseVer) {
		var ret string
		return ret
	}
	return *o.ReleaseVer
}

// GetReleaseVerOk returns a tuple with the ReleaseVer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseVerDTO) GetReleaseVerOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseVer) {
		return nil, false
	}
	return o.ReleaseVer, true
}

// HasReleaseVer returns a boolean if a field has been set.
func (o *ReleaseVerDTO) HasReleaseVer() bool {
	if o != nil && !IsNil(o.ReleaseVer) {
		return true
	}

	return false
}

// SetReleaseVer gets a reference to the given string and assigns it to the ReleaseVer field.
func (o *ReleaseVerDTO) SetReleaseVer(v string) {
	o.ReleaseVer = &v
}

func (o ReleaseVerDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReleaseVerDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReleaseVer) {
		toSerialize["releaseVer"] = o.ReleaseVer
	}
	return toSerialize, nil
}

type NullableReleaseVerDTO struct {
	value *ReleaseVerDTO
	isSet bool
}

func (v NullableReleaseVerDTO) Get() *ReleaseVerDTO {
	return v.value
}

func (v *NullableReleaseVerDTO) Set(val *ReleaseVerDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseVerDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseVerDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseVerDTO(val *ReleaseVerDTO) *NullableReleaseVerDTO {
	return &NullableReleaseVerDTO{value: val, isSet: true}
}

func (v NullableReleaseVerDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseVerDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


